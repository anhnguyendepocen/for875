## TODO: Rewrite all() as allC()
library(Rcpp)
?all
all(c(T, F, F, T, T))
all(c(T, T, T, T))
cppFunction("bool allC(LogicalVector x) {
int n = x.size();
bool output = TRUE;
for(int i = 0; i < n; i++) {
if (!x[i]) {
output = FALSE;
break;
}
}
return output;
}")
allC(c("T, T, T, T, T"))
allC(c(T, T, T, T, T))
allC(c(F, T, T, F, T))
?range
## TODO: Rewrite range() as rangeC()
cppFunction("NumericVector rangeC(NumericVector x) {
int n = x.size();
NumericVector output(2);
for(int i = 0; i < n; i++) {
if(i == 0) {
output[0] = x[i];
output[1] = x[i];
} elseif(x[i] < min) {
output[0] = x[i];
} elseif(x[i] > max) {
output[1] = x[i];
}
}
return output;
}")
## TODO: Rewrite range() as rangeC()
cppFunction("NumericVector rangeC(NumericVector x) {
int n = x.size();
NumericVector output(2);
for(int i = 0; i < n; i++) {
if(i == 0) {
output[0] = x[i];
output[1] = x[i];
} else if(x[i] < min) {
output[0] = x[i];
} else if(x[i] > max) {
output[1] = x[i];
}
}
return output;
}")
## TODO: Rewrite range() as rangeC()
cppFunction("NumericVector rangeC(NumericVector x) {
int n = x.size();
NumericVector output(2);
for(int i = 0; i < n; i++) {
if(i == 0) {
output[0] = x[i];
output[1] = x[i];
} else if(x[i] < output[0]) {
output[0] = x[i];
} else if(x[i] > output[1]) {
output[1] = x[i];
}
}
return output;
}")
# Example run 1
range(c(-0.654, 0.121, 0.088, 0.976, -0.325))
rangeC(c(-0.654, 0.121, 0.088, 0.976, -0.325))
# Example run 2
range(c(1,1,1,1,1,1,1,1))
rangeC(c(1,1,1,1,1,1,1,1))
# Example run 3
range(c(9991, 847, 63, 345, 561))
rangeC(c(9991, 847, 63, 345, 561))
cbind(1:3, 1:3)
sqrt(2)
sart(8)
sqrt(8)
## TODO: Rewrite distR() using a Rcpp cppFunction() function, distC()
cppFunction("NumericMatrix distC(NumericMatrix x) {
int nrow = x.nrow(), ncol = x.ncol();
NumericMatrix out(nrow, ncol);
for (int i = 0; i < nrow; i++) {
for (int j = 0; j < nrow; j++) {
for (int k = 0; k < ncol; k++) {
out[i, j] = out[i, j] + pow(x[i, k] - x[j, k], 2);
}
out[i, j] = sqrt(out[i, j]);
}
}
return out;
}")
y <- cbind(c(7, 10, 8), c(1, 4, 5))
runif(10000)
matrix(runif(100, 100))
?matrix
matrix(runif(100), 100, 100)
## TODO: Give the timings of the two functions using microbenchmark()
testMatrix <- matrix(runif(100), 100, 100)
## TODO: Give the timings of the two functions using microbenchmark()
cbind(runif(1000), runif(1000))
## TODO: Give the timings of the two functions using microbenchmark()
testMatrix <- cbind(runif(1000), runif(1000))
?microbenchmark
library(microbenchmark)
?microbenchmark
f <- function() NULL
res <- microbenchmark(NULL, f(), times=1000L)
## Print results:
print(res)
## Plot results:
boxplot(res)
## Pretty plot:
if (require("ggplot2")) {
autoplot(res)
}
## Print results:
print(res, unit = "minutes")
## Print results:
print(res, unit = "ns")
## Print results:
print(res, unit = "ms")
u.email <- "http://blue.for.msu.edu/FOR875/data/email1.txt"
email1 <- scan(u.email, what = "character", sep = "")
length(email1)
email1[1:10]
email1 <- scan(u.email, what = "character", sep = "\n")
u.moby <- "http://blue.for.msu.edu/FOR875/data/mobydick.txt"
moby_dick <- scan(u.moby, what = "character", sep = "\n")
?scan
moby_dick[1:25]
movy_dick <- moby_dick[408:18576]
moby_dick <- moby_dick[408:18576]
length(moby_dick)
?paste
paste("Homer Simpson", "is", "bart Simpson's", "father")
n <- 10
paste("The value of n is", n)
paste("Homer Simpson", "is", "bart Simpson's", "father")
paste("mail", "google", "com", spe = ".")
paste("mail", "google", "com", sep = ".")
paste(c("one", "two", "three", "four", "five"),
c("six", "seven", "eight", "nine", "ten"))
paste(c("one", "two", "three", "four", "five"),
c("six", "seven", "eight", "nine", "ten"), collapse = ".")
paste(c("one", "two", "three", "four", "five"),
c("six", "seven", "eight", "nine", "ten"), collapse = "&&")
paste(c("one", "two", "three", "four", "five"),
c("six", "seven", "eight", "nine", "ten"), collapse = " ")
coin_toss <- function(n=10, iter = 500){
require(ggplot2)
df <- data.frame(numheads = numeric(iter))
for(i in 1:iter) {
df$numheads[i] <- rbinom(1, n, 0.5)
if(i <= 5) {
print(paste("The number of HEADS out of", n, "tosses is", df$numheads[i]))}
}
ggplot(data = df, aes(x = numheads)) +
geom_histogram(binwidth = 1) +
ggtitle(paste("Number of HEADS in", n, "tosses"))
}
coin_toss()
coin_toss(n = 25, iter=1000)
moby_dick <- paste(moby_dick, collapse = " ")
length(moby_dick)
x <- "aBCdefG12#"
y <- x
tolower(x)
toupper(y)
moby_dick <- tolower(moby_dick)
nchar("dog")
nchar(c("dog", "cat", "horse", "elephant"))
nchar(c("dog", "cat", "horse", "elephant", NA, "goat"))
nchar(c("dog", "cat", "horse", "elephant", NA, "goat"), keepNA = TRUE)
nchar(moby_dick)
?nchar
strsplit(c("mail.msu.edu", "mail.google.com", "www.amazon.com"),
split = ".", fixed = TRUE)
unlist(strsplit(c("mail.msu.edu", "mail.google.com", "www.amazon.com"),
split = ".", fixed = TRUE))
unlist(strsplit(c("dog", "cat", "pig", "horse", "rabbit"),
split = "[aeiou]"))
unlist(strsplit(c("dog", "cat", "pig", "horse", "rabbit"),
split = "[aorb]"))
unlist(strsplit(c("a1c2b", "bbb2bc3f"), split = "[1-9]"))
unlist(strsplit(c("aBc1fGh", "1TyzaaG"), split = "[^a-z]"))
moby_dick <- unlist(strsplit(moby_dick, split = "[^0-9A-Za-z]"))
moby_dick[1:50]
length(moby_dick)
not.blanks <- which(moby_dick != "")
moby_dick <- moby_dick[not.blanks]
length(moby_dick)
moby_dick[1:50]
moby_dick_nchar <- nchar(moby_dick)
moby_dick_nchar[1:50]
max(moby_dick_nchar)
ggplot(data = data.frame(nwords = moby_dick_nchar), aes(x = nwords)) + geom_histogram(binwidth = 1, color = "black", fill = "white") + ggtitle("Number of letters in words in Moby Dick") + theme_bw()
moby_dick_word_table <- table(moby_dick)
moby_dick_word_table <- sort(moby_dick_word_table, decreasing = TRUE)
moby_dick_word_table[1:50]
grep("a", c("the rain", "in Spain    stays mainly", "in", "the plain"),
fixed = TRUE)
grep("a", c("the rain", "in Spain    stays mainly", "in", "the plain"),
fixed = TRUE, value = TRUE)
gsub("a", "?", c("the rain", "in Spain    stays mainly", "in",
"the plain"), fixed = TRUE)
gsub("a", "?", c("the rain", "in Spain    stays mainly", "in", "the plain"), fixed = TRUE)
