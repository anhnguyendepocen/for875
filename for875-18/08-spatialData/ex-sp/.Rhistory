wells <- read.csv("CO-wells/CO-wells.csv", header = TRUE, stringsAsFactors = FALSE)
coordinates(wells) <- ~Longitude+Latitude
proj4string(wells) <- "+proj=longlat +datum=WGS84"
##reproject huc and state
huc <- spTransform(huc, CRS(proj4string(wells)))
#state <- spTransform(state, CRS(proj4string(wells)))
##calculate the total, active, and closed wells by huc
##Add `HUC_ID` to wells using the `over` function with `wells` and `huc` as input. HUC_ID will serve as your unique identifire in the HUC level calcualtions of well numbers, fortify, and subsequent left_join
wells$HUC_ID <- over(wells, huc)$HUC_ID
huc.wells <- wells@data %>% group_by(HUC_ID) %>% summarize(total = length(Facil_Stat), open = sum(Facil_Stat %in% c("AC","PR")), closed = sum(!Facil_Stat %in% c("AC","PR")))
dim(huc.wells)
dim(huc)
head(huc@data)
huc@data <- left_join(huc@data, huc.wells, by = "HUC_ID")
head(huc@data)
huc@data <- huc@data %>% rowwise() %>%
mutate(total = ifelse(is.na(total), 0, total),
open = ifelse(is.na(open), 0, open),
closed = ifelse(is.na(closed), 0, closed))
huc@data
pal <- with(huc@data, colorBin(palette="YlOrRd", domain=total, bins = seq(min(total), max(total), length.out=9)))
leaflet() %>% addPolygons(data=huc, fill = ~pal(total))
pal(huc$total)
min(huc$total)
leaflet() %>% addPolygons(data=huc, fillColor = ~pal(total))
pal <- colorNumeric(palette = "YlOrRd", domain = huc$total
leaflet() %>% addPolygons(data=huc, fillColor = ~pal(total))
```
pal <- colorNumeric(palette = "YlOrRd", domain = huc$total)
leaflet() %>% addPolygons(data=huc, fillColor = ~pal(total))
huc$total
pal <- colorQuantile(palette = "YlOrRd", domain = huc$total, n=5)
leaflet() %>% addPolygons(data=huc, fillColor = ~pal(total))
leaflet() %>% addPolygons(data=huc, fillColor = ~pal(total), fillOpacity = 1)
leaflet() %>% addPolygons(data=huc, fillColor = ~pal(total), fillOpacity = 0.75)
head(huc)
names(huc)
labels <- sprintf(
"<strong>%s</strong><br/>Total: %g<br/>Open: %g</br>Closed: %g",
huc$HUC_NAME, huc$total, huc$open, huc$closed
) %>% lapply(htmltools::HTML)
labels
labels <- sprintf(
"<strong>%s</strong><br/>Total: %g<br/>Open: %g</br>Closed: %g",
huc$HUC_NAME, huc$total, huc$open, huc$closed
) %>% lapply(htmltools::HTML)
leaflet(huc) %>% addPolygons(fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
leaflet(huc) %>% addPolygons(fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addTiles()
leaflet(huc) %>% addPolygons(fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addTiles()
leaflet(huc) %>% addPolygons(fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addTiles()
leaflet(huc) %>% addPolygons(fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addPolygons(state) %>% addTiles()
leaflet(huc) %>% addPolygons(fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addPolygons(data=state) %>% addTiles()
leaflet(huc) %>% addPolygons(fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addPolygons(data=state, fillColor = NA, weight = 1, color = "black") %>% addTiles()
leaflet(huc) %>% addPolygons(fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addPolygons(data=state, fillColor = "transparent", weight = 1, color = "black") %>% addTiles()
labels <- sprintf(
"<strong>%s</strong><br/>Total: %g<br/>Open: %g</br>Closed: %g",
huc$HUC_NAME, huc$total, huc$open, huc$closed
) %>% lapply(htmltools::HTML)
leaflet(huc) %>% addPolygons(fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addPolygons(data=state, fillColor = "transparent", weight = 1, color = "black") %>% addTiles()
leaflet(huc) %>% addPolygons(fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>% addTiles()
leaflet(width = "100%") %>%
# Overlay groups
addPolygons(data = huc, fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"), group = "Oil & gas wells") %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
baseGroups = c("OSM (default)", "Imagery", "Topo),
overlayGroups = c("Oil & gas wells),
options = layersControlOptions(collapsed = FALSE)
)
```
leaflet(width = "100%") %>%
# Overlay groups
addPolygons(data = huc, fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"), group = "Oil & gas wells") %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
baseGroups = c("OSM (default)", "Imagery", "Topo"),
overlayGroups = c("Oil & gas wells),
options = layersControlOptions(collapsed = FALSE)
)
)
Esri.WorldTopoMap
DF
)
)
)
""
"
leaflet(width = "100%") %>%
# Overlay groups
addPolygons(data = huc, fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"), group = "Oil & gas wells") %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
baseGroups = c("OSM (default)", "Imagery", "Topo"),
overlayGroups = c("Oil & gas wells"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet(width = "100%") %>%
# Overlay groups
addPolygons(data = huc, fillColor = "transparent", weight = 1, color="black", group = "HUC") %>%
addPolygons(data = huc, fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"), group = "Oil & gas wells") %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("HUC", "Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet(width = "100%") %>%
# Overlay groups
addPolygons(data = huc, fillColor = "transparent", weight = 1.5, color="black", group = "HUC") %>%
addPolygons(data = huc, fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"), group = "Oil & gas wells") %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("HUC", "Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)
leaflet(width = "100%") %>%
# Overlay groups
addPolygons(data = huc, fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"), group = "Oil & gas wells") %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
addPolygons(data = huc, fillColor = "transparent", weight = 1.5, color="black", group = "HUC") %>%
# Layers control
addLayersControl(
overlayGroups = c("HUC", "Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)
huc <- readOGR("CO-wells", "CO-HUC", verbose = FALSE)
head(huc)
head(huc@data)
rm(list=ls())
library(rgdal)
library(sp)
library(rgeos)
library(leaflet)
library(dplyr)
library(ggplot2)
huc <- readOGR("CO-wells", "CO-HUC", verbose = FALSE)
wells <- read.csv("CO-wells/CO-wells.csv", header = TRUE, stringsAsFactors = FALSE)
coordinates(wells) <- ~Longitude+Latitude
proj4string(wells) <- "+proj=longlat +datum=WGS84"
huc <- spTransform(huc, CRS(proj4string(wells)))
wells$HUC_ID <- over(wells, huc)$HUC_ID
huc.wells <- wells@data %>% group_by(HUC_ID) %>% summarize(total = length(Facil_Stat), active = sum(Facil_Stat %in% c("AC","PR")), inactive = sum(!Facil_Stat %in% c("AC","PR")))
huc@data <- left_join(huc@data, huc.wells, by = "HUC_ID")
huc@data <- huc@data %>% rowwise() %>%
mutate(total = ifelse(is.na(total), 0, total),
open = ifelse(is.na(active), 0, active),
closed = ifelse(is.na(inactive), 0, inactive))
pal <- with(huc@data, colorBin(palette="YlOrRd", domain=total, bins = seq(min(total), max(total), length.out=9)))
pal <- colorQuantile(palette = "YlOrRd", domain = huc$total, n=5)
labels <- sprintf(
"<strong>HUC: %s</strong><br/>Total: %g<br/>Open: %g</br>Closed: %g",
huc$HUC_NAME, huc$total, huc$open, huc$closed
) %>% lapply(htmltools::HTML)
leaflet(width = "100%") %>%
# Overlay groups
addPolygons(data = huc, fillColor = ~pal(total),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"), group = "Oil & gas wells") %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addLegend("bottomright", pal = pal, values = huc$total,
title = "Total number of gas an oil<br>wells by USGS HUC",
opacity = 0.5
)
rm(list=ls())
library(rgdal)
library(sp)
library(rgeos)
library(leaflet)
library(dplyr)
library(ggplot2)
huc <- readOGR("CO-wells", "CO-HUC", verbose = FALSE)
wells <- read.csv("CO-wells/CO-wells.csv", header = TRUE, stringsAsFactors = FALSE)
coordinates(wells) <- ~Longitude+Latitude
proj4string(wells) <- "+proj=longlat +datum=WGS84"
huc <- spTransform(huc, CRS(proj4string(wells)))
wells$HUC_ID <- over(wells, huc)$HUC_ID
huc.wells <- wells@data %>% group_by(HUC_ID) %>% summarize(total = length(Facil_Stat), active = sum(Facil_Stat %in% c("AC","PR")), inactive = sum(!Facil_Stat %in% c("AC","PR")))
huc@data <- left_join(huc@data, huc.wells, by = "HUC_ID")
dim(wells)
wells <- read.csv("CO-wells/CO-wells.csv", header = TRUE, stringsAsFactors = FALSE)
dim(wells)
coordinates(wells) <- ~Longitude+Latitude
proj4string(wells) <- "+proj=longlat +datum=WGS84"
huc <- spTransform(huc, CRS(proj4string(wells)))
wells$HUC_ID <- over(wells, huc)$HUC_ID
dim(huc.wells)
wells$HUC_ID
str(wells@data)
unique(wells$HUC_ID)
pal <- colorQuantile(palette = "YlOrRd", domain = huc$total, n=5)
leaflet(width = "100%") %>%
# Overlay groups
addPolygons(data = huc, fillColor = ~pal(total), group = "Oil & gas wells") %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo")
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)
a <- c(NA, 1, 2, NA)
ifelse(is.na(a), 0, a)
library(htmlwidgets)
library(htmlwidgets)
library(htmlwidgets)
saveWidget(m, file="m.html")
