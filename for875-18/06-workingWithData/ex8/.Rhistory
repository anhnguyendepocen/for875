x[x == 18] <- 0 #Replace 18 by 0 in x
x
# TODO 3.13: Count the number of maple trees here
sum(spp=="maple")
c(FALSE, TRUE, FALSE) | c(TRUE, FALSE, FALSE)
c(FALSE, TRUE, FALSE) & c(TRUE, TRUE, FALSE)
a <- 1:5
b <- c(TRUE, TRUE, TRUE, FALSE, FALSE)
e <- c(TRUE, FALSE, FALSE, FALSE, TRUE)
a[b | e]
letters
letters %in% c("a", "m", "q", "s")
# TODO 3.14: Answer to question here
dbh_l_sf <- dbh[spp %in% c("larch", "silver fir")]
dbh_l_sf
# TODO 3.15: Answer to question here
mean(dbh_l_sf)
sd(dbh_l_sf)
# TODO 3.16: Answer to question here
step.1 <- spp == "silver fir"
step.2 <- spp == "larch"
logical.vector <- c(step.1 | step.2)
dbh[logical.vector]
# TODO 3.17: Answer to question here
dbh_beech <- dbh[spp %in% c("beech")]
max(dbh_beech)
vol_beech <- vol[spp %in% c("beech")]
max(vol)
max(vol[spp == "beech"])
m,ax(vol[spp %in% "beech"])
max(vol[spp %in% "beech"])
library(ggplot2)
?geom_boxplot
?aes()
?group()
#TODO 8.1: Read in LifeExp.csv and check that it was read in correctly
gapminder1 <- read.csv("LifeExp.csv", header = TRUE, na.strings = "")
dim(gapminder1)
#TODO 8.2: rename name of the first column to "country"
names(gapminder1)[1] <- "country"
#TODO 8.3: calculate mean, median, minimum, and maximum life expetancy for each year here
apply(gapminder1[,2:ncol(gapminder1)], MARGIN = 2, mean, na.rm = TRUE)
apply(gapminder1[,2:ncol(gapminder1)], MARGIN = 2, median, na.rm = TRUE)
apply(gapminder1[,2:ncol(gapminder1)], MARGIN = 2, min, na.rm = TRUE)
apply(gapminder1[,2:ncol(gapminder1)], MARGIN = 2, max, na.rm = TRUE)
#TODO 8.4: Change gapminder1 from wide to long format here
library(tidyr)
gapminder1 <- gather(data = gapminder1, key = year, value = lifeExp, 2:ncol(gapminder1))
#str(gapminder1)
dim(gapminder1)
gapminder1$year <- substr(x = gapminder1$year, start = 2, stop = 5)
gapminder1$year <- as.integer(gapminder1$year)
#TODO 8.5: Draw histogram here
library(ggplot2)
ggplot(gapminder1, aes(x = lifeExp)) + geom_histogram()
#TODO 8.6: Draw side boxplots here
ggplot(gapminder1[gapminder1$year==seq(1900, 1990, by=10),], aes(x = year, y = lifeExp)) + geom_boxplot()
#TODO 8.6: Draw side boxplots here
ggplot(gapminder1[gapminder1$year==seq(1900, 1990, by=10),], aes(x = year, y = lifeExp)) + geom_boxplot(aex(x = year, y = lifeExp))
#TODO 8.6: Draw side boxplots here
ggplot(gapminder1[gapminder1$year==seq(1900, 1990, by=10),], aes(x = year, y = lifeExp)) + geom_boxplot(aes(x = year, y = lifeExp))
#TODO 8.6: Draw side boxplots here
ggplot(gapminder1[gapminder1$year==seq(1900, 1990, by=10),], aes(x = year, y = lifeExp)) + geom_boxplot(aes(color = year))
#TODO 8.6: Draw side boxplots here
ggplot(gapminder1[gapminder1$year==seq(1900, 1990, by=10),], aes(x = year, y = lifeExp)) + geom_boxplot(aes(group = year))
?group
.08/.02
4*.08
knitr::opts_chunk$set(echo = TRUE, comment = NA, tidy = TRUE)
library(unmarked)
library(plotrix)
library(sp)
library(raster)
library(RandomFields)
library(coda)
library(AHMbook)
library(unmarked)
set.seed(82)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.5)
summary(tmp)_
summary(tmp)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.5)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.5)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.05)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.05)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.05)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.05)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.05)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.05)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.05)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.05)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.05)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 0.05)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 1)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 1)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 1)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 1)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 1)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 1)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = 1)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = .5)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = .5)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = .5)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = .25)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = .25)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = .25)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = .25)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = .25)
tmp <- sim.fn(quad.size = 16, cell.size = 2, intensity = .25)
gapminder <- read.delim("http://blue.for.msu.edu/FOR875/data/gapminder.tsv", header = TRUE)
str(gapminder)
library(ggplot2)
five_countries <- c("China", "United States", "Finland", "Germany", "Norway")
ggplot(data = subset(gapminder, country %in% five_countries), aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point() +
labs(title = "TODO 6.8: plot 8")
?ggplot
ggplot(subset(gapminder, country %in% five_countries), aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point() +
labs(title = "TODO 6.8: plot 8")
ggplot(data = subset(gapminder, country %in% five_countries), aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point() +
labs(title = "TODO 6.8: plot 8")
ggplot(subset(gapminder, country %in% c("Canada", "France", "Germany", "Italy", "Japan"), aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point() +
labs(title = "TODO 6.8: plot 8")
ggplot(subset(gapminder, country %in% c("Canada", "France", "Germany", "Italy", "Japan"), aes(x = year, y = lifeExp, color = country)) +
ggplot(data = subset(gapminder, country %in% five_countries), aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point() +
labs(title = "TODO 6.8: plot 8")
ggplot(subset(gapminder, country %in% c("Canada", "France", "Germany", "Italy", "Japan"), aes(x = year, y = lifeExp, color = country)) +
)
ggplot(subset(gapminder, country %in% c("Canada", "France", "Germany", "Italy", "Japan")), aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point() +
labs(title = "TODO 6.8: plot 8")
str(gapminder)
ggplot(subset(gapminder, country %in% c("Canada", "France", "Germany", "Italy", "Japan")), aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point() +
labs(title = "TODO 6.8: plot 8")
library(unmarked)
ggplot(data = gapminder, aes(x = LifeExp)) + geom_histogram()
?gapminder
str(gapminder)
ggplot(data = gapminder, aes(x = lifeExp)) + geom_histogram()
ggplot(subset(gapminder, country %in% c("Canada", "France", "Germany", "Italy", "Japan")), aes(x = year, y = lifeExp)) +
labs(x = "year", y = "lifeExp") +
geom_line(aes(color=country)) +
geom_point(color=country)
ggplot(subset(gapminder, country %in% c("Canada", "France", "Germany", "Italy", "Japan")), aes(x = year, y = lifeExp)) +
labs(x = "year", y = "lifeExp") +
geom_line(aes(color=country)) +
geom_point(aes(color=country))
par(mfrow(c(1, 1)))
?par
par(mfrow =c(1, 1))
ggplot(subset(gapminder, country %in% c("Canada", "France", "Germany", "Italy", "Japan")), aes(x = year, y = lifeExp)) +
labs(x = "year", y = "lifeExp") +
geom_line(aes(color=country)) +
geom_point(aes(color=country))
par(mfrow =c(1, 2))
ggplot(subset(gapminder, country %in% c("Canada", "France", "Germany", "Italy", "Japan")), aes(x = year, y = lifeExp)) +
labs(x = "year", y = "lifeExp") +
geom_line(aes(color=country)) +
geom_point(aes(color=country))
ggplot(data = subset(gapminder, country %in% five_countries), aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point() +
labs(title = "TODO 6.8: plot 8")
par(mfrow =c(1, 2))
ggplot(subset(gapminder, country %in% c("Canada", "France", "Germany", "Italy", "Japan")), aes(x = year, y = lifeExp)) +
labs(x = "year", y = "lifeExp") +
geom_line(aes(color=country)) +
geom_point(aes(color=country))
ggplot(data = subset(gapminder, country %in% five_countries), aes(x = year, y = lifeExp, color = country)) +
geom_line() +
geom_point() +
labs(title = "TODO 6.8: plot 8")
ggplot(subset(gapminder, country %in% c("Canada", "France", "Germany", "Italy", "Japan")), aes(x = year, y = lifeExp)) +
labs(x = "year", y = "lifeExp") +
geom_line(aes(color=country)) +
geom_point(aes(color=country))
nTrials <- seq(1, 100, by = 5)
nTrials
nTrials <- seq(0, 100, by = 5)
nTrials
results <- numeric(nTrials)
data <- sim.fn(cell.size = cellSize, intensity = )
for (j in seq_along(replications)) {
tmpArray <- numeric(ntrials[i])
data <- sim.fn(cell.size = cellSize, intensity = )
}
cellSize <- 16
inten <- 0.5
test <- sim.fn(cell.size = 16, intensity = 0.5, show.plot = FALSE)
library(unmarked)
test <- sim.fn(cell.size = 16, intensity = 0.5, show.plot = FALSE)
quadSize <- 16
test <- sim.fn(quad.size = 16, intensity = 0.5, show.plot = FALSE)
test
test <- sim.fn(quad.size = 16, intensity = 0.5)
test
mean(test$N)
?sim.fn
?apply
seq_along(nTrials)
quadSize <- 16
inten <- 0.5
# Number of replications for each value of n (number of data collections)
replications <- 100
# Vector containing the number of measurements
nTrials <- seq(0, 100, by = 1)
# Vector to hold average of results for each value of n
results <- numeric(nTrials)
# Actual computation
# i goes across the number of measurements
for (i in seq_along(nTrials)) {
# Create array to store max values of each simulation
maxArray <- numeric(replications)
# j goes across each simulation
for (j in seq_along(replications)) {
# Create array to mean values of each
tmpArray <- numeric(ntrials[j])
for (k in 1:i) {
data <- sim.fn(quad.size = quadSize, intensity = inten, show.plot = FALSE)
tmpArray[k] <- data$N
}
maxArray[j] <- max(tmpArray)
}
results[i] <- mean(maxArray)
}
quadSize <- 16
inten <- 0.5
# Number of replications for each value of n (number of data collections)
replications <- 100
# Vector containing the number of measurements
nTrials <- seq(0, 100, by = 1)
# Vector to hold average of results for each value of n
results <- numeric(nTrials)
# Actual computation
# i goes across the number of measurements
for (i in seq_along(nTrials)) {
# Create array to store max values of each simulation
maxArray <- numeric(replications)
# j goes across each simulation
for (j in seq_along(replications)) {
# Create array to mean values of each
tmpArray <- numeric(nTrials[j])
for (k in 1:i) {
data <- sim.fn(quad.size = quadSize, intensity = inten, show.plot = FALSE)
tmpArray[k] <- data$N
}
maxArray[j] <- max(tmpArray)
}
results[i] <- mean(maxArray)
}
maxArray
quadSize <- 16
inten <- 0.5
# Number of replications for each value of n (number of data collections)
replications <- 100
# Vector containing the number of measurements
nTrials <- seq(0, 100, by = 1)
# Vector to hold average of results for each value of n
results <- numeric(nTrials)
# Actual computation
# i goes across the number of measurements
for (i in seq_along(nTrials)) {
# Create array to store max values of each simulation
maxArray <- numeric(replications)
# j goes across each simulation
for (j in seq_along(replications)) {
# Create array to mean values of each
tmpArray <- numeric(nTrials[i])
for (k in 1:i) {
data <- sim.fn(quad.size = quadSize, intensity = inten, show.plot = FALSE)
tmpArray[k] <- data$N
}
maxArray[j] <- max(tmpArray)
}
results[i] <- mean(maxArray)
}
results
# Vector to hold average of results for each value of n
results <- numeric(nTrials)
quadSize <- 16
inten <- 0.5
# Number of replications for each value of n (number of data collections)
replications <- 100
# Vector containing the number of measurements
nTrials <- seq(0, 100, by = 1)
# Vector to hold average of results for each value of n
results <- numeric(lenght(nTrials))
# Vector to hold average of results for each value of n
results <- numeric(length(nTrials))
# Actual computation
# i goes across the number of measurements
for (i in seq_along(nTrials)) {
# Create array to store max values of each simulation
maxArray <- numeric(replications)
# j goes across each simulation
for (j in seq_along(replications)) {
# Create array to mean values of each
tmpArray <- numeric(nTrials[i])
for (k in 1:i) {
data <- sim.fn(quad.size = quadSize, intensity = inten, show.plot = FALSE)
tmpArray[k] <- data$N
}
maxArray[j] <- max(tmpArray)
}
results[i] <- mean(maxArray)
}
results
sim.fn(quad.size = 16, intensity = 0.5)
tmpArray
test$N
mean(test$N)
quadSize <- 16
inten <- 0.5
# Number of replications for each value of n (number of data collections)
replications <- 100
# Vector containing the number of measurements
nTrials <- seq(0, 100, by = 1)
# Vector to hold average of results for each value of n
results <- numeric(length(nTrials))
# Actual computation
# i goes across the number of measurements
for (i in seq_along(nTrials)) {
# Create array to store max values of each simulation
maxArray <- numeric(replications)
# j goes across each simulation
for (j in seq_along(replications)) {
# Create array to mean values of each
tmpArray <- numeric(nTrials[i])
for (k in 1:i) {
data <- sim.fn(quad.size = quadSize, intensity = inten, show.plot = FALSE)
tmpArray[k] <- mean(data$N)
}
maxArray[j] <- max(tmpArray)
}
results[i] <- mean(maxArray)
}
results
tmpArray
max(tmpArray)
maxArray
rm(list = ls())
quadSize <- 16
inten <- 0.5
# Number of replications for each value of n (number of data collections)
replications <- 100
# Vector containing the number of measurements
nTrials <- seq(0, 100, by = 1)
# Vector to hold average of results for each value of n
results <- numeric(length(nTrials))
# Actual computation
# i goes across the number of measurements
for (i in seq_along(nTrials)) {
# Create array to store max values of each simulation
maxArray <- numeric(replications)
# j goes across each simulation
for (j in seq_along(replications)) {
# Create array to mean values of each
tmpArray <- numeric(i)
for (k in 1:i) {
data <- sim.fn(quad.size = quadSize, intensity = inten, show.plot = FALSE)
tmpArray[k] <- mean(data$N)
}
maxArray[j] <- max(tmpArray)
}
results[i] <- mean(maxArray)
}
seq_along(replications)
replications
rm(list = ls())
quadSize <- 16
inten <- 0.5
# Number of replications for each value of n (number of data collections)
replications <- 100
# Vector containing the number of measurements
nTrials <- seq(0, 100, by = 1)
# Vector to hold average of results for each value of n
results <- numeric(length(nTrials))
# Actual computation
# i goes across the number of measurements
for (i in seq_along(nTrials)) {
# Create array to store max values of each simulation
maxArray <- numeric(replications)
# j goes across each simulation
for (j in 1:replications) {
# Create array to mean values of each
tmpArray <- numeric(i)
for (k in 1:i) {
data <- sim.fn(quad.size = quadSize, intensity = inten, show.plot = FALSE)
tmpArray[k] <- mean(data$N)
}
maxArray[j] <- max(tmpArray)
}
results[i] <- mean(maxArray)
}
results
## ----tidy=FALSE----------------------------------------------------------
u.bb <- "http://blue.for.msu.edu/FOR875/data/BrainAndBody.csv"
BrainBody <- read.table(file = u.bb, header = TRUE, sep = ",",
stringsAsFactors = FALSE)
head(BrainBody)
## ----tidy=FALSE----------------------------------------------------------
u.bb <- "http://blue.for.msu.edu/FOR875/data/BrainAndBody.tsv"
BrainBody2 <- read.table(file = u.bb, header = TRUE, sep = "\t",
stringsAsFactors = FALSE)
head(BrainBody2)
## ----tidy=FALSE----------------------------------------------------------
u.bb <- "http://blue.for.msu.edu/FOR875/data/BrainAndBody.txt"
BrainBody3 <- read.table(u.bb, header = TRUE, sep = " ",
stringsAsFactors = FALSE)
## ----tidy=FALSE----------------------------------------------------------
u.bb <- "http://blue.for.msu.edu/FOR875/data/BrainAndBody.txt"
BrainBody3 <- read.table(u.bb, header = TRUE, sep = " ",
stringsAsFactors = FALSE, skip = 4)
BrainBody3[1:10,]
## ----tidy=FALSE----------------------------------------------------------
u.weather <- "http://blue.for.msu.edu/FOR875/data/WeatherKLAN2014.csv"
WeatherKLAN2014 <- read.csv(u.weather, header=TRUE,
stringsAsFactors = FALSE, na.string = "")
WeatherKLAN2014[1:15,]
## ----tidy=FALSE----------------------------------------------------------
u.weather <- "http://blue.for.msu.edu/FOR875/data/WeatherKLAN2014Full.csv"
WeatherKLAN2014Full <- read.csv(u.weather, header=TRUE,
stringsAsFactors = FALSE,
na.string = "")
names(WeatherKLAN2014Full)
## ------------------------------------------------------------------------
mean(WeatherKLAN2014Full$Mean.TemperatureF)
mean(WeatherKLAN2014Full$Min.TemperatureF)
mean(WeatherKLAN2014Full$Max.TemperatureF)
##Et Cetera
## ------------------------------------------------------------------------
str(WeatherKLAN2014Full)
## ------------------------------------------------------------------------
WeatherKLAN2014Full$PrecipitationIn[1:50]
## ------------------------------------------------------------------------
colMeans(WeatherKLAN2014Full[,c(2:19, 21, 23)])
## ------------------------------------------------------------------------
apply(X = WeatherKLAN2014Full[,c(2:19, 21, 23)], MARGIN = 2, FUN = sd)
## ----tidy=FALSE----------------------------------------------------------
mean(WeatherKLAN2014Full$Max.TemperatureF[
WeatherKLAN2014Full$CloudCover < 4 &
WeatherKLAN2014Full$Max.Humidity > 85])
## ------------------------------------------------------------------------
with(WeatherKLAN2014Full,
mean(Max.TemperatureF[CloudCover < 4 & Max.Humidity > 85]))
## ------------------------------------------------------------------------
library(gapminder)
str(gapminder)
## ------------------------------------------------------------------------
gapminder$TotalGDP <- gapminder$gdpPercap * gapminder$pop
str(gapminder)
## ------------------------------------------------------------------------
rm(gapminder)
library(gapminder)
str(gapminder)
gapminder <- within(gapminder, TotalGDP <- gdpPercap * pop)
str(gapminder)
## ----tidy=FALSE----------------------------------------------------------
gapminder <- within(gapminder, {TotalGDP <- gdpPercap * pop
lifeExpMonths <- lifeExp * 12})
str(gapminder)
## ------------------------------------------------------------------------
str(gapminder)
gapminder <- gapminder[1:6]
str(gapminder)
## ------------------------------------------------------------------------
a <- data.frame(x = 1:3, y = c("dog", "cat", "pig"),
z = seq(from = 1, to = 2, length = 3))
a
a <- a[1]
a
a <- data.frame(x = 1:3, y = c("dog", "cat", "pig"),
z = seq(from = 1, to = 2, length = 3))
a
a <- a[,1]
a
## ------------------------------------------------------------------------
rm(gapminder)
library(gapminder)
gapminder$lifeExp[1:5]
gapminder$lifeExp <- gapminder$lifeExp * 12
gapminder$lifeExp[1:5]
rm(gapminder)
library(gapminder)
gapminder$lifeExp[1:5]
gapminder <- within(gapminder, lifeExp <- lifeExp * 12)
gapminder$lifeExp[1:5]
## ------------------------------------------------------------------------
u.rel <- "http://blue.for.msu.edu/FOR875/data/religion2.csv"
religion <- read.csv(u.rel, header=TRUE, stringsAsFactors = FALSE)
head(religion)
## ----tidy=FALSE----------------------------------------------------------
library(tidyr)
religionLong <- gather(data = religion, key = IncomeLevel,
value = Frequency, 2:11)
religionLong <- gather(data = religion, key = IncomeLevel, +
value = Frequency, 2:11)
religionLong <- gather(data = religion, key = IncomeLevel, value = Frequency, 2:11)
religionLong <- gather(data = religion, key = IncomeLevel,
+ value = Frequency, 2:11)
