\chapter{Graphics in R}
R can be used to create a vast array of graphical representations of data. Creating ``standard'' graphical displays is straightforward, but a main strength of R is the ability to customize graphical displays to create either non-standard graphics or to modify more standard graphical displays to create publication-ready versions.

<<echo = FALSE>>=
library(gapminder)
@

There are several packages available in R for creating graphics. The two leading packages are the \verb+graphics+ package which is always available, and the \verb+ggplot2+ package, which must be installed and made available by the user..\footnote{Other graphics packages include {\texttt lattice} and {\texttt grid}}  Knowing how to use both the \verb+graphics+ and \verb+ggplot2+ packages is worthwhile. But for beginners \verb+ggplot2+ has somewhat simpler syntax, and also produces excellent graphics without much tinkering, so the focus in this book will be on \verb+ggplot2+. 

The \verb+gg+ in \verb+ggplot2+ stands for \emph{Grammar of Graphics}. The goal is to have a unified and sensible way to describe graphical displays, whether scatter plots, histograms, bar charts, or some other type of graphical display. The grammar would likely need to focus on \emph{data}, since clearly the data are the basis of a graphic, \emph{geometric objects}, which would describe things like lines, points, rectangles, etc. that might be included in the graphic, \emph{annotations}, which provide for example a key to color choices in the graphic, etc. As will become obvious, once these are mastered for a particular type of plot such as a scatter plot, it is easy to transfer this knowledge to other types of graphical displays.  

Among the many useful books and websites focused on graphics in R, the following are recommended: 
\begin{itemize}
\item \citet{WickhamGgplot2Book}
\item \citet{ChangGraphicsCookbook}
\end{itemize}

\section{Scatter Plots}
Scatter plots are a workhorse of data visualization and provide a good entry point to the \verb+ggplot2+ system. Begin by considering a simple and classic data set sometimes called \emph{Fisher's Iris Data}. These data are available in R.
<<prompt=TRUE>>=
data(iris)
str(iris)
@
The data contain measurements on petal and sepal length and width for $\Sexpr{dim(iris)[1]}$ iris plants. The plants are from one of three species, and the species information is also included in the data frame. The data are commonly used to test classification methods, where the goal would be to, based on the four length and width measurements, correctly determine the species. To get a preliminary sense of how this might work, we can draw some scatter plots of length versus width. Recall that \verb+ggplot2+ is not available by default, so we first have to download and install the package.
<<prompt = TRUE, eval=FALSE>>=
install.packages("ggplot2")
@
Once this is done the package is installed on the local hard drive, and we can use the \verb+library+ function to make the package available during the current R session.

Next a basic scatter plot is drawn. We'll keep the focus on sepal length and width, but of course similar plots could be drawn using petal length and width. The prompt is not displayed below, since the continuation prompt \verb|+| can cause confusion.
<<prompt = FALSE>>=
library(ggplot2)
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()
@
In this case the first argument to the \verb+gggplot+ function is the name of the data frame. Second, the \verb+aes+ (short for aesthetics) function specifies the mapping to the \verb+x+ and \verb+y+ axes. By itself the \verb+ggplot+ function as written doesn't tell R what sort of graphical display is desired. That is done by adding a \verb+geom+ (short for geometry) specification, in this case \verb+geom_point+. 

Looking at the scatter plot and thinking about the focus of finding a method to classify the species, two thoughts come to mind. First, the plot might be improved by increasing the size of the points. And second, using different colors for the points corresponding to the three species would help. 

<<prompt=FALSE>>=
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(size = 4, aes(color=Species))
@
Notice that a legend showing what the colors represent is automatically generated and included in the graphic. Next, the size of the points seems a bit big now, and it might be helpful to use different shapes for the different species.
<<prompt=FALSE>>=
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(size = 3, aes(color=Species, shape=Species))
@
Here we see that the legend automatically changes to include both the color and shape attached to the three species. The size of the points seems more appropriate.

\subsection{Structure of a typical \texttt{ggplot}}
The examples above start with the function \verb+ggplot()+, which takes as arguments the data frame containing the data to be plotted as well as a mapping from the data to the axes, enclosed by the \verb+aes()+ function. Next a \verb+geom+ function, in the above case \verb+geom_point()+, is added. It might just specify the geometry, but also might specify aspects such as size, color, or shape. 

Typically many graphics are created and discarded in the search for an informative graphic, and often the initial specification of data and basic aesthetics from \verb+ggplot()+ stays the same in all the attempts. In such a case it can be helpful to assign that portion of the graphic to an R object, both to minimize the amount of typing and to keep certain aspects of all the graphics constant. Here's how that could be done for the graphics above.
<<prompt = FALSE>>=
iris.p = ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) 
iris.p + geom_point()
iris.p + geom_point(size = 3, aes(color=Species, shape=Species))
@

\subsection{Adding lines to a scatter plot}
To add a fitted least squares line to a scatter plot, use \verb+stat_smooth+, which adds a smoother (possibly a least squares line, possibly a smooth curve fit to the data, etc.). The argument \verb+method  =  lm+ specifies a line fitted by least squares, and the argument \verb+se = FALSE+ suppresses the default display of a confidence band around the line or curve which was fit to the data.
<<prompt = FALSE>>=
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(size=3, aes(color=Species))
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(size=3, aes(color=Species)) + stat_smooth(method = lm, se=FALSE)
@
For the iris data, it probably makes more sense to fit separate lines by species. This can be specified using the \verb+aes()+ function inside \verb+stat_smooth()+. 
<<prompt = FALSE>>=
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(size=3, aes(color=Species)) + stat_smooth(method = lm, se=FALSE, aes(color=Species))
@
In this case we specified the same color aesthetic for the points and the lines. If we know we want this color aesthetic (colors corresponding to species) for all aspects of the graphic, we can specify it in the main \verb+ggplot()+ function:
<<prompt = FALSE>>=
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + geom_point(size=3) + stat_smooth(method = lm, se=FALSE)
@

Another common use of line segments in a graphic is to connect the points in order, accomplished via the \verb+geom_line()+ function. Although it is not clear why this helps in understanding the iris data, the technique is illustrated next, first doing this for all the points in the graphic, and second doing this separately for the three species. 
<<prompt=FALSE>>=
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(size = 4, aes(color=Species, shape = Species)) + geom_line()
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(size = 4, aes(color=Species)) + geom_line(aes(color=Species))
@

\section{Axes, titles, text, etc.}
The default settings of \verb+ggplot2+ often produce excellent graphics, but once a graphic is chosen for dissemination, the user will likely want to customize things like the title, axes, etc. In this section some tools for customization are presented. Most will be illustrated in the context of a data set on crime rates in the 50 states in the United States. These data were made available by Nathan Yau at \url{http://flowingdata.com/2010/11/23/how-to-make-bubble-charts/}. The data include crime rates per 100,000 people for various crimes such as murder and robbery, and also include each state's population. The crime rates are from the year 2005, while the population numbers are from the year 2008, but the difference in population between the years is not great, and the exact population is not particularly important for what we'll do below.

First, read in the data, examine its structure, and produce a simple scatter plot of motor vehicle theft versus burglary.
<<>>=
u.crime = "http://www.stt.msu.edu/~melfi/STT301/data/crimeRatesByState2005.csv"
crime = read.csv(u.crime, header=TRUE)
str(crime)
ggplot(data = crime, aes(x = burglary, y = motor_vehicle_theft)) + geom_point()
@
\subsection{Customizing axes}
By default the axis labels are the names of the relevant columns in the data frame. Here these are changed, and also the range of the x and y axes is altered to start at zero and to go to the maximum of the x and y variables.\footnote{\texttt{ggplot2} makes the axes extend slightly beyond the given range, since typically this is what the user wants.} In addition the underlying theme is changed from the default theme with a gray background and white gridlines to a theme with a white background and black gridlines. 
<<prompt=FALSE>>=
ggplot(data = crime, aes(x = burglary, y = motor_vehicle_theft)) + geom_point() + scale_x_continuous(name="Burglaries per 100,000 population", limits=c(0,max(crime$burglary))) +
scale_y_continuous(name="Motor vehicle theft per 100,000 population", limits = c(0, max(crime$motor_vehicle_theft))) + theme_bw()
@

\subsection{Adding text and customizing point size and color}
Next we make the size of points proportional to population, change the color of the points, and add text giving the state names.
<<prompt=FALSE>>=
ggplot(data = crime, aes(x = burglary, y = motor_vehicle_theft, size=population)) + geom_point(color = "red") + scale_x_continuous(name="Burglaries per 100,000 population", limits=c(0,max(crime$burglary))) +
scale_y_continuous(name="Motor vehicle theft per 100,000 population", limits = c(0, max(crime$motor_vehicle_theft))) + theme_bw()
@

The graphic would be more informative if the states' names were shown on or near the points. This is done next. 

<<prompt = FALSE>>=
ggplot(data = crime, aes(x = burglary, y = motor_vehicle_theft, size=population, label = state)) + geom_point(color = "red") + scale_x_continuous(name="Burglaries per 100,000 population", limits=c(0,max(crime$burglary))) + 
scale_y_continuous(name="Motor vehicle theft per 100,000 population", limits = c(0, max(crime$motor_vehicle_theft))) + theme_bw() + geom_text() 
@

This isn't ideal. First, the text is scaled by population size, and some of the smaller states' names are unreadable. Second, similarly some of the smaller states' points are too small. And third, although the legend gives an idea of the states' populations, it takes up space that could better be used for the main graphic. 

<<prompt = FALSE>>=
ggplot(data = crime, aes(x = burglary, y = motor_vehicle_theft, size=population, label = state)) + geom_point(color = "red") + scale_x_continuous(name="Burglaries per 100,000 population", limits=c(0,max(crime$burglary))) + 
scale_y_continuous(name="Motor vehicle theft per 100,000 population", limits = c(0, max(crime$motor_vehicle_theft))) + theme_bw() + geom_text(size = 3) + guides(size=FALSE) + scale_size_continuous(range=c(3,15))
@

There is still clear room for improvement. There is extra whitespace in the graphic that could be removed by changing the axis limits. Some of the text is unreadable because the points are so close together. Maybe including a subset of the 50 states would still be informative. And a title would be helpful. Only this simple addition is included next.

<<prompt = FALSE>>=
ggplot(data = crime, aes(x = burglary, y = motor_vehicle_theft, size=population, label = state)) + geom_point(color = "red") + scale_x_continuous(name="Burglaries per 100,000 population", limits=c(0,max(crime$burglary))) + 
scale_y_continuous(name="Motor vehicle theft per 100,000 population", limits = c(0, max(crime$motor_vehicle_theft))) + theme_bw() + geom_text(size = 3) + guides(size=FALSE) + scale_size_continuous(range=c(3,15)) + ggtitle("Crime rates in the 50 states")
@



\section{Other types of graphics}
Scatter and line plots, which have just been presented, are common but certainly not the only graphical displays in common use. Histograms, boxplots, and bar graphs, as well as more ``mathematical'' displays such as the graph of a function, are commonly used to represent data. Examples of each are presented below. 
\subsection{Histograms} 
Simon Newcomb conducted several experiments to estimate the speed of light, by measuring the time it took for light to travel from his laboratory to a mirror at the base of the Washington Monument, and then back to his lab. This is a distance of $7.44373$ km, and by dividing this distance by the measured time, an estimate for the speed of light is obtained. 

The times are of course quite small, and to avoid working with very small numbers, the data are recoded to be the deviation from $24800$ nanoseconds. For example an observation coded as $28$ represents a time of $24828$ nanoseconds, while an observation coded as $-44$ represents a time of $24756$ nanoseconds.  
<<>>=
u.newcomb = "http://www.stt.msu.edu/~melfi/STT301/data/Newcomb.csv"
Newcomb = read.csv(u.newcomb, header=TRUE)
head(Newcomb)
@

<<prompt=FALSE>>=
ggplot(Newcomb, aes(x = Time)) + geom_histogram()
@

The software has an algorithm to calculate bin widths for the histogram. Sometimes the algorithm makes choices that aren't suitable, and these can be changed by specifying a \verb+binwidth+. In addition, the appearance of the bars also can be changed.

<<prompt = FALSE>>=
ggplot(Newcomb, aes(x = Time)) + geom_histogram(binwidth = 5, color = "black", fill = "red" )
@

\subsection{Boxplots}
<<prompt = FALSE>>=
ggplot(data = subset(gapminder,  year == 2002), aes(x = continent, y = gdpPercap)) + geom_boxplot(color = "black", fill = "lightblue")
@

Here's the same set of boxplots, but with different colors, different axis labels, and the boxes plotted horizontally rather than vertically.
<<prompt = FALSE>>=
ggplot(data = subset(gapminder,  year == 2002), aes(x = continent, y = gdpPercap)) + geom_boxplot(color = "red", fill = "lightblue") + scale_x_discrete(name = "Continent") + scale_y_continuous(name = "Per Capita GDP") + coord_flip()
@

\subsection{Bar graphs}
As part of a study, elementary school students were asked which was more important to them: Good grades, popularity, or athletic ability. Here is a brief look at the data.
<<>>=
u.goals = "http://www.stt.msu.edu/~melfi/STT301/data/StudentGoals.csv"
StudentGoals = read.csv(u.goals, header=TRUE)
head(StudentGoals)
@

First a simple bar graph of the most important goal chosen is drawn, followed by a stacked bar graph which also includes the student's gender, followed by a side by side bar graph which includes the student's gender.
<<prompt = FALSE>>=
ggplot(StudentGoals, aes(x = Goals)) + geom_bar()
ggplot(StudentGoals, aes(x = Goals, fill = Gender)) + geom_bar()
ggplot(StudentGoals, aes(x = Goals, fill = Gender)) + geom_bar(position = "dodge")
@
In this example R counted the number of students who had each goal and used these counts as the height of the bars. Sometimes the data contain the bar heights as a variable. For example, we create a bar graph of India's per capita GDP with separate bars for each year in the data. 

<<>>=
ggplot(subset(gapminder, country == "India"), aes(x = year, y = gdpPercap)) + geom_bar(stat = "identity", color = "black", fill = "green") + ggtitle("India's per-capita GDP")
@


\subsection{Graphs of functions}
One way to create a plot of a mathematical function $f$ is to create a data frame with $x$ values in one column and $f(x)$ values in another column, and then draw a line plot. 
<<prompt = FALSE>>=
x = seq(-pi, pi, len = 1000)
sin.data = data.frame(x = x, y = sin(x))
rm(x)
ggplot(data = sin.data, aes(x = x, y = y)) + geom_line() + scale_y_continuous(name = "sin(x)")
@
This method works well, but with a better understanding of functions in R we will be able to plot mathematical functions in a simpler and  more natural way. 
