install.packages("RSQLite")
install.packages(c("dplyr", "dbplyr"))
library(knitr)
library(knitrout)
install.packages("knitrout")
library(knitrout)
install.packages("xtable")
install.packages("ElemStatLearn")
install.packages("xcolor")
install.packages("xcolor")
install.packages("iris")
?iris
data(iris)
iris
?geom_point
library(ggplot2)
install.packages("ggplot2")
?installed.packages
install.packages("bibtex")
install.packages("sp")
install.packages("downloader")
install.packages("rgdal")
install.packages("ggmap")
install.packages("leaflet")
install.packages("raster")
install.packages("tidyr")
library(downloader)
download("http://blue.for.msu.edu/FOR875/data/PEF.zip",
destfile="./PEF.zip", mode="wb")
unzip("PEF.zip", exdir = ".")
list.files("PEF")
library(c(dplyr, dbplyr, RSQLite)
library(c(dplyr, dbplyr, RSQLite))
library(c(dplyr, dbplyr, RSQLite))
library(dplyr)
library(dbplyr)
library(RSQLite)
library(dplyr)
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
sessionInfo()
library(ggplot2)
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
?ggplot
library(ggplot2)
?ggplot
install.packages("formatR")
install.packages("nycflights13")
setwd("~/Documents/01-summer2018/01-for875/exercises/ex9")
library(dplyr)
library(nycflights13)
flights
print(flights, n = 20)
print(flights, n = 20)
str(flights)
glimpse(flights)
flights %>%
filter(month == 1 & dest %in% c("DTW", "ORD"))
flights %>%
arrange(desc(distance), desc(dep_delay))
flights %>%
arrange(desc(distance), desc(dep_delay))
flights %>%
select(distance, dep_delay) %>%
arrange(desc(distance), desc(dep_delay))
test <- flights %>% select(dstance, dep_delay) %>% arrange(desc(distance), desc(dep_delay))
test <- flights %>% select(distance, dep_delay) %>% arrange(desc(distance), desc(dep_delay))
print(test, n = 20)
print(test, n = 30)
print(test, n = 34-)
print(test, n = 40)
print(test, n = 100)
print(test, n = 4400)
print(test, n = 400)
test <- flights %>% select(distance, dep_delay) %>% arrange(desc(distance), desc(dep_delay))
flights
flights %>%
select(dep_time, dep_delay_arr_time, arr_delay, origin, dest)
flights %>%
select(dep_time, dep_delay, arr_time, arr_delay, origin, dest)
flights %>%
glimpse(mutate(gain = arr_delay - dep_delay, gain_per_hour = gain/air_time))
?glimpse
flights %>%
mutate(gain = arr_delay - dep_delay, gain_per_hour = gain/air_time)
flights %>%
filter(carrier == "UA" & dest == "ORD") %>%
group_by(origin) %>%
summarize(number_flights = n(), mean(arr_delay, na.rm = TRUE))
flights %>%
filter(carrier == "UA" & dest == "ORD") %>%
group_by(origin) %>%
summarize(number_flights = n(), mean_delay = mean(arr_delay, na.rm = TRUE))
u.corn = "http://blue.for.msu.edu/FOR875/data/corn.csv"
corn = read.csv(u.corn, header=TRUE)
corn
?read.csv
u.corn = "http://blue.for.msu.edu/FOR875/data/corn.csv"
corn = read.csv(u.corn, header = TRUE)
dbar <- mean(corn$kiln_dried - corn$regular)
n <- length(corn$regular)
S_d <- sd(corn$kiln_dried - corn$regular)
t_obs <- dbar/(S_d/sqrt(n))
t_obs
pval <- 2 * (1 - pt(abs(t_obs), n - 1))
?pt
lcl <- dbar - margin
ucl <- dbar + margin
ucl <- dbar + margin
margin <- qt(0.975, n - 1) * (S_d / sqrt(n))
lcl <- dbar - margin
ucl <- dbar + margin
lcl
ucl
paired_t <- function(x1, x2) {
n <- length(x1)
dbar <- mean(x1 - x2)
s_d <- sd(x1 - x2)
tstat <- dbar/(s_d/sqrt(n))
pval <- 2 * (1 - pt(abs(tstat), n-1))
margin <- qt(0.975, n - 1) * s_d/sqrt(n)
lcl <- dbar - margin
ucl <- dbar + margin
return(list(tstat = tstat, pval = pval, lcl = lcl, ucl = ucl))
}
paired_t(x1 = corn$kiln_dried, x2 = corn$regular)
paired_t <- function(x1, x2, cl = 0.95) {
n <- length(x1)
dbar <- mean(x1 - x2)
s_d <- sd(x1 - x2)
tstat <- dbar/(s_d/sqrt(n))
pval <- 2 * (1 - pt(abs(tstat), n-1))
pctile <- 1 - (1 - cl)/2
margin <- qt(pctile, n - 1) * s_d/sqrt(n)
lcl <- dbar - margin
ucl <- dbar + margin
return(list(tstat = tstat, pval = pval, lcl = lcl, ucl = ucl))
}
paired_t(corn$kiln_dried, corn$regular)
paired_t(corn$kiln_dried, corn$regular, cl = 0.99)
stop("The input vectors must have the same length")
paired_t <- function(x1, x2, cl = 0.95) {
if(length(x1) !+ length(x2)) {
stop("The input vectors must have the same length")
}
n <- length(x1)
dbar <- mean(x1 - x2)
s_d <- sd(x1 - x2)
tstat <- dbar/(s_d/sqrt(n))
pval <- 2 * (1 - pt(abs(tstat), n-1))
pctile <- 1 - (1 - cl)/2
margin <- qt(pctile, n - 1) * s_d/sqrt(n)
lcl <- dbar - margin
ucl <- dbar + margin
return(list(tstat = tstat, pval = pval, lcl = lcl, ucl = ucl))
}
paired_t(corn$kiln_dried, 1:6, cl = 0.99)
paired_t <- function(x1, x2, cl = 0.95) {
if(length(x1) !+ length(x2)) {
stop("The input vectors must have the same length")
}
n <- length(x1)
dbar <- mean(x1 - x2)
s_d <- sd(x1 - x2)
tstat <- dbar/(s_d/sqrt(n))
pval <- 2 * (1 - pt(abs(tstat), n-1))
pctile <- 1 - (1 - cl)/2
margin <- qt(pctile, n - 1) * s_d/sqrt(n)
lcl <- dbar - margin
ucl <- dbar + margin
return(list(tstat = tstat, pval = pval, lcl = lcl, ucl = ucl))
}
paired_t <- function(x1, x2, cl = 0.95) {
if(length(x1) != length(x2)) {
stop("The input vectors must have the same length")
}
n <- length(x1)
dbar <- mean(x1 - x2)
s_d <- sd(x1 - x2)
tstat <- dbar/(s_d/sqrt(n))
pval <- 2 * (1 - pt(abs(tstat), n-1))
pctile <- 1 - (1 - cl)/2
margin <- qt(pctile, n - 1) * s_d/sqrt(n)
lcl <- dbar - margin
ucl <- dbar + margin
return(list(tstat = tstat, pval = pval, lcl = lcl, ucl = ucl))
}
paired_t(corn$kiln_dried, 1:6, cl = 0.99)
stop("The confidence level must be between 0 and 1")
paired_t <- function(x1, x2, cl = 0.95) {
if(length(x1) != length(x2)) {
stop("The input vectors must have the same length")
}
if(cl <=0 || cl >=1) {
stop("The confidence level must be between 0 and 1")
}
n <- length(x1)
dbar <- mean(x1 - x2)
s_d <- sd(x1 - x2)
tstat <- dbar/(s_d/sqrt(n))
pval <- 2 * (1 - pt(abs(tstat), n-1))
pctile <- 1 - (1 - cl)/2
margin <- qt(pctile, n - 1) * s_d/sqrt(n)
lcl <- dbar - margin
ucl <- dbar + margin
return(list(tstat = tstat, pval = pval, lcl = lcl, ucl = ucl))
}
paired_t(corn$kiln_dried, 1:6, cl = 399)
paired_t(corn$kiln_dried, corn$regular, cl = 399)
sign <- function(x) {
if(x < 0) {
print("the number is negative")
} else if (x > 0) {
print("the number is positive")
} else {
print("the number is zero")
}
}
sign(-500)
(1.5 - 1.4) - 0.1
k <- 1
while(1 != 1 + 1/2^k) {
k <- k + 1
}
k
1/2^(k)
1 == 1/2^(k)
1 == 1 + 1/2^(k)
1 == 1 + 1/2^(k + 1)
1 == 1 + 1/2^(k - 1)
f1 <- function(n) {
x <- numeric(0)
for(i in 1:n) {
x <- c(x, i)
}
x
}
f2 <- function(n) {
x <- numeric(n)
for(i in 1:n) {
x[i] <- i
}
x
}
n <- 100000
f1(n)
system.time(f1(n))
system.time(f2(n))
read.csv
library(dbplot)
install.packages("dbplot")
library(dbplot)
employees %>%
dbplot_bar(Title)
setwd("~/Documents/01-summer2018/01-for875/Databases")
library(dplyr)
library(dbplyr)
chinook <- DBI::dbConnect(RSQLite::SQLite(), "chinook.db")
src_dbi(chinook)
employees <- tbl(chinook, "employees")
employees
employees %>%
select(LastName, FirstName, Phone, Email) %>%
arrange(LastName)
employees %>%
filter(Title == "Sales Support Agent") %>%
select(LastName, FirstName, Address) %>%
arrange(LastName)
employees %>%
group_by(ReportsTo) %>%
summarize(numberAtLocation = n())
salesSupportAgents <- employees %>%
filter(Title == "Sales Support Agent") %>%
select(LastName, FirstName, Address) %>%
arrange(LastName) %>%
collect()
salesSupportAgents
library(dbplot)
employees %>%
dbplot_bar(Title)
?labs
employees %>%
dbplot_bar(Title) +
labs(title = "Employee Types") +
ylab("Count") +
theme_bw()
employees %>%
dbplot_bar(Title) +
ylab("Count") +
theme_bw()
library(ggplot2)
employees %>%
dbplot_bar(Title) +
labs(title = "Employee Types") +
ylab("Count") +
theme_bw()
employees %>%
dbplot_bar(Title) +
labs(title = "Employee Types") +
ylab("Count") +
theme_classic()
install.packages("bigrquery")
install.packages("curl")
install.packages("progress")
install.packages("rapidjsonr")
install.packages("bigrquery")
install.packages("bigrquery", repos = NULL, type = "source")
library(bigrquery)
install.packages("bigrquery")
install.packages("openssl")
2
q()
n
