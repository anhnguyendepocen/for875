?seq
unique(gapminder$country)
knitr::opts_chunk$set(comment = NA, tidy = TRUE)
data(swiss)
str(swiss)
head(swiss)
cor(swiss)
plot(swiss$Education, swiss$Fertility)
plot(Fertility ~ Education, data = swiss)
swiss.lm <- lm(Fertility ~ Education, data = swiss)
is.list(swiss.lm)
names(swiss.lm)
swiss.lm.coef.1 <- swiss.lm$coefficients
swiss.lm.resid.1 <- swiss.lm$residuals
swiss.lm.coef.1
swiss.lm.resid.1
is.vector(swiss.lm.coef.1)
is.vector(swiss.lm.resid.1)
swiss.lm.coef.2 <- swiss.lm[["coefficients"]]
swiss.lm.coef.3 <- swiss.lm["coefficients"]
is.vector(swiss.lm.coef.1)
is.vector(swiss.lm.coef.2)
is.vector(swiss.lm.coef.3)
is.list(swiss.lm.coef.1)
is.list(swiss.lm.coef.2)
is.list(swiss.lm.coef.3)
gapminder = read.delim("http://blue.for.msu.edu/STT301/data/gapminder.tsv")
str(gapminder)
mean(gapminder$pop[gapminder$country == "France"])
unique(gapminder$country[gapminder$continent == "Africa"])
boxplot(gapminder$gdpPercap[gapminder$year == 1952])
hist(gapminder$gdpPercap[gapminder$year == 1952])
boxplot(gapminder$gdpPercap[gapminder$year == 2002])
hist(gapminder$gdpPercap[gapminder$year == 2002])
gapminder$country[gapminder$pop > 150000000 & gapminder$year == 1992]
gapminder$pop[gapminder$lifeExp > 70 & gapminder$year == 1967]
mean(gapminder$pop[gapminder$country %in% c("United States", "Mexico", "Canada") & gapminder$year == 1997])
dd <- data.frame(x = c("dog", "cat", "oink", "pig", "oink", "cat", "dog", "cat", "dog"), y = c("dog", "cat", "cat", "pig", "cow", "dog", "dog", "cat", "pig"), stringsAsFactors = FALSE)
dd
dd$x[dd$x == "oink"] <- "pig"
dd
dim(dd)
dd$same <- rep("no", dim(dd)[1])
dd
dd$same[dd$x == dd$y] <- "yes"
dd
gapminder$G8 <- rep(0, length.out=dim(gapminder)[1])
# Chunk 1: global_options
knitr::opts_chunk$set(comment = NA, tidy = TRUE)
# Chunk 2
data(swiss)
str(swiss)
head(swiss)
cor(swiss)
# Chunk 3
plot(swiss$Education, swiss$Fertility)
plot(Fertility ~ Education, data = swiss)
# Chunk 4
swiss.lm <- lm(Fertility ~ Education, data = swiss)
is.list(swiss.lm)
names(swiss.lm)
# Chunk 5
swiss.lm.coef.1 <- swiss.lm$coefficients
swiss.lm.resid.1 <- swiss.lm$residuals
# Chunk 6
swiss.lm.coef.1
swiss.lm.resid.1
# Chunk 7
is.vector(swiss.lm.coef.1)
is.vector(swiss.lm.resid.1)
# Chunk 8
swiss.lm.coef.2 <- swiss.lm[["coefficients"]]
swiss.lm.coef.3 <- swiss.lm["coefficients"]
# Chunk 9
is.vector(swiss.lm.coef.1)
is.vector(swiss.lm.coef.2)
is.vector(swiss.lm.coef.3)
is.list(swiss.lm.coef.1)
is.list(swiss.lm.coef.2)
is.list(swiss.lm.coef.3)
# Chunk 10
gapminder = read.delim("http://blue.for.msu.edu/STT301/data/gapminder.tsv")
str(gapminder)
# Chunk 11
mean(gapminder$pop[gapminder$country == "France"])
# Chunk 12
unique(gapminder$country[gapminder$continent == "Africa"])
# Chunk 13
boxplot(gapminder$gdpPercap[gapminder$year == 1952])
hist(gapminder$gdpPercap[gapminder$year == 1952])
boxplot(gapminder$gdpPercap[gapminder$year == 2002])
hist(gapminder$gdpPercap[gapminder$year == 2002])
# Chunk 14
gapminder$country[gapminder$pop > 150000000 & gapminder$year == 1992]
# Chunk 15
gapminder$pop[gapminder$lifeExp > 70 & gapminder$year == 1967]
# Chunk 16
mean(gapminder$pop[gapminder$country %in% c("United States", "Mexico", "Canada") & gapminder$year == 1997])
# Chunk 17
dd <- data.frame(x = c("dog", "cat", "oink", "pig", "oink", "cat", "dog", "cat", "dog"), y = c("dog", "cat", "cat", "pig", "cow", "dog", "dog", "cat", "pig"), stringsAsFactors = FALSE)
dd
dd$x[dd$x == "oink"] <- "pig"
dd
dim(dd)
dd$same <- rep("no", dim(dd)[1])
dd
dd$same[dd$x == dd$y] <- "yes"
dd
# Chunk 18
gapminder$G8 <- rep(0, length.out=dim(gapminder)[1])
# Chunk 1: global_options
knitr::opts_chunk$set(comment = NA, tidy = TRUE)
# Chunk 2
data(swiss)
str(swiss)
head(swiss)
cor(swiss)
# Chunk 3
plot(swiss$Education, swiss$Fertility)
plot(Fertility ~ Education, data = swiss)
# Chunk 4
swiss.lm <- lm(Fertility ~ Education, data = swiss)
is.list(swiss.lm)
names(swiss.lm)
# Chunk 5
swiss.lm.coef.1 <- swiss.lm$coefficients
swiss.lm.resid.1 <- swiss.lm$residuals
# Chunk 6
swiss.lm.coef.1
swiss.lm.resid.1
# Chunk 7
is.vector(swiss.lm.coef.1)
is.vector(swiss.lm.resid.1)
# Chunk 8
swiss.lm.coef.2 <- swiss.lm[["coefficients"]]
swiss.lm.coef.3 <- swiss.lm["coefficients"]
# Chunk 9
is.vector(swiss.lm.coef.1)
is.vector(swiss.lm.coef.2)
is.vector(swiss.lm.coef.3)
is.list(swiss.lm.coef.1)
is.list(swiss.lm.coef.2)
is.list(swiss.lm.coef.3)
# Chunk 10
gapminder = read.delim("http://blue.for.msu.edu/STT301/data/gapminder.tsv")
str(gapminder)
# Chunk 11
mean(gapminder$pop[gapminder$country == "France"])
# Chunk 12
unique(gapminder$country[gapminder$continent == "Africa"])
# Chunk 13
boxplot(gapminder$gdpPercap[gapminder$year == 1952])
hist(gapminder$gdpPercap[gapminder$year == 1952])
boxplot(gapminder$gdpPercap[gapminder$year == 2002])
hist(gapminder$gdpPercap[gapminder$year == 2002])
# Chunk 14
gapminder$country[gapminder$pop > 150000000 & gapminder$year == 1992]
# Chunk 15
gapminder$pop[gapminder$lifeExp > 70 & gapminder$year == 1967]
# Chunk 16
mean(gapminder$pop[gapminder$country %in% c("United States", "Mexico", "Canada") & gapminder$year == 1997])
# Chunk 17
dd <- data.frame(x = c("dog", "cat", "oink", "pig", "oink", "cat", "dog", "cat", "dog"), y = c("dog", "cat", "cat", "pig", "cow", "dog", "dog", "cat", "pig"), stringsAsFactors = FALSE)
dd
dd$x[dd$x == "oink"] <- "pig"
dd
dim(dd)
dd$same <- rep("no", dim(dd)[1])
dd
dd$same[dd$x == dd$y] <- "yes"
dd
# Chunk 18
gapminder$G8 <- rep(0, length.out=dim(gapminder)[1])
unique(gapminder$country)
gapminder$G8[gapminder$country %in% c("France", "Germany", "Italy", "United Kingdom", "Japan", "United States", "Canada", "Russia") ] <- 1
cbind(gapminder$G8, gapminder$country)
gapminder[,c("G8", "country")]
# Chunk 1: global_options
knitr::opts_chunk$set(comment = NA, tidy = TRUE)
# Chunk 2
data(swiss)
str(swiss)
head(swiss)
cor(swiss)
# Chunk 3
plot(swiss$Education, swiss$Fertility)
plot(Fertility ~ Education, data = swiss)
# Chunk 4
swiss.lm <- lm(Fertility ~ Education, data = swiss)
is.list(swiss.lm)
names(swiss.lm)
# Chunk 5
swiss.lm.coef.1 <- swiss.lm$coefficients
swiss.lm.resid.1 <- swiss.lm$residuals
# Chunk 6
swiss.lm.coef.1
swiss.lm.resid.1
# Chunk 7
is.vector(swiss.lm.coef.1)
is.vector(swiss.lm.resid.1)
##Create swiss.lm.coef.2 and swiss.lm.coef.3 here, then print swiss.lm.coef.1, swiss.lm.coef.2, and swiss.lm.coef.3
swiss.lm.coef.2 <- swiss.lm[["coefficients"]]
swiss.lm.coef.3 <- swiss.lm["coefficients"]
swiss.lm.coef.1
swiss.lm.coef.2
swiss.lm.coef.3
# Chunk 1: global_options
knitr::opts_chunk$set(comment = NA, tidy = TRUE)
# Chunk 2
data(swiss)
str(swiss)
head(swiss)
cor(swiss)
# Chunk 3
plot(swiss$Education, swiss$Fertility)
plot(Fertility ~ Education, data = swiss)
# Chunk 4
swiss.lm <- lm(Fertility ~ Education, data = swiss)
is.list(swiss.lm)
names(swiss.lm)
# Chunk 5
swiss.lm.coef.1 <- swiss.lm$coefficients
swiss.lm.resid.1 <- swiss.lm$residuals
# Chunk 6
swiss.lm.coef.1
swiss.lm.resid.1
# Chunk 7
is.vector(swiss.lm.coef.1)
is.vector(swiss.lm.resid.1)
# Chunk 8
# TODO: Create swiss.lm.coef.2 and swiss.lm.coef.3 here, then print swiss.lm.coef.1, swiss.lm.coef.2, and swiss.lm.coef.3
swiss.lm.coef.2 <- swiss.lm[["coefficients"]]
swiss.lm.coef.3 <- swiss.lm["coefficients"]
swiss.lm.coef.1
swiss.lm.coef.2
swiss.lm.coef.3
# Chunk 9
# TODO: Apply is.vector and is.list on swiss.lm.coef.1, swiss.lm.coef.2, and swiss.lm.coef.3 here
is.vector(swiss.lm.coef.1)
is.vector(swiss.lm.coef.2)
is.vector(swiss.lm.coef.3)
is.list(swiss.lm.coef.1)
is.list(swiss.lm.coef.2)
is.list(swiss.lm.coef.3)
# Chunk 10
gapminder <- read.delim("http://blue.for.msu.edu/STT301/data/gapminder.tsv")
str(gapminder)
# Chunk 11
mean(gapminder$pop[gapminder$country == "France"])
# Chunk 12
unique(gapminder$country[gapminder$continent == "Africa"])
# Chunk 13
boxplot(gapminder$gdpPercap[gapminder$year == 1952])
hist(gapminder$gdpPercap[gapminder$year == 1952])
boxplot(gapminder$gdpPercap[gapminder$year == 2002])
hist(gapminder$gdpPercap[gapminder$year == 2002])
# Chunk 14
gapminder$country[gapminder$pop > 150000000 & gapminder$year == 1992]
# TODO: Add code to get the population of all countries meeting the noted conditions
gapminder$pop[gapminder$lifeExp > 70 & gapminder$year == 1967]
# TODO: Add code to get the population of all countries meeting the noted conditions
gapminder$pop[gapminder$lifeExp > 70 & gapminder$year == 1967]
gapminder[gapminder$lifeExp > 70 & gapminder$year == 1967, c("pop","country")]
data(swiss)
str(swiss)
head(swiss)
cor(swiss)
plot(swiss$Education, swiss$Fertility)
plot(Fertility ~ Education, data = swiss)
swiss.lm <- lm(Fertility ~ Education, data = swiss)
is.list(swiss.lm)
names(swiss.lm)
swiss.lm.coef.1 <- swiss.lm$coefficients
swiss.lm.resid.1 <- swiss.lm$residuals
swiss.lm.coef.1
swiss.lm.resid.1
is.vector(swiss.lm.coef.1)
is.vector(swiss.lm.resid.1)
# TODO 5.1: Create swiss.lm.coef.2 and swiss.lm.coef.3 here, then print swiss.lm.coef.1, swiss.lm.coef.2, and swiss.lm.coef.3
swiss.lm.coef.2 <- swiss.lm[["coefficients"]]
swiss.lm.coef.3 <- swiss.lm["coefficients"]
swiss.lm.coef.1
swiss.lm.coef.2
swiss.lm.coef.3
# TODO 5.2: Apply is.vector and is.list on swiss.lm.coef.1, swiss.lm.coef.2, and swiss.lm.coef.3 here
is.vector(swiss.lm.coef.1)
is.vector(swiss.lm.coef.2)
is.vector(swiss.lm.coef.3)
is.list(swiss.lm.coef.1)
is.list(swiss.lm.coef.2)
is.list(swiss.lm.coef.3)
swiss.lm.coef.3
is.atomic(swiss.lm.coef.3)
?list
# Simulate a covariate called vegHt for 100 sites
# set the seed so we get the same
set.seed(2014)
# Number of sites surveyed
M <- 100
# Get values for vegHt from a uniform dist from 1 to 3
# These are just random values from a uniform dist from 1 to 3
vegHt <- runif(M, 1, 3)
# Suppose that occupancy probability increases with vegHt
# The relationship is described by an intercept of -3 and
# a slope parameter of 2 on the logit scale
beta0 <- -3
beta1 <- 2
# apply inverse logit
psi <- plogis(beta0 + beta1 * vegHt)
# Now we go to 100 sites and observe presence or absence
# This is our set of simulated observations.
z <- rbinom(M, 1, psi)
# Definition of negative log-likelihood
negLogLike <- function(beta, y, x) {
beta0 <- beta[1]
beta1 <- beta[2]
psi <- plogis(beta0 + beta1 * x)
likelihood <- psi^y * (1 - psi)^(1 - y)
# you could also just use the dbinom function like below
# likelihood <- dbinom(y, 1, psi)
return(-sum(log(likelihood)))
}
# Look at negative log likelihood for 2 parameter sets
# Remember that the lower the value, the better it is
negLogLike(c(0, 0), y = z, x = vegHt)
# The below is better (these are the actually values used to generate the data,
# so it is clearly going to be better than the above)
negLogLike(c(-3, 2), y = z, x = vegHt)
# Let's minimize it formally by function minimization
# This method just uses the function optim() to accomplish the minimization
# Don't really know anything about how optim works behind the scenes
startingValues <- c(beta0 = 0, betal = 0)
optOut <- optim(startingValues, negLogLike, y = z, x = vegHt, hessian = TRUE)
(mles <- optOut$par)
# Alternative 1: Brute-force grid search for MLEs
mat <- as.matrix(expand.grid(seq(-10, 10, 0.1), seq(-10, 10, 0.1)))
nll <- array(NA, dim = nrow(mat))
for (i in 1:nrow(mat)) {
nll[i] <- negLogLike(mat[i, ], y = z, x = vegHt)
}
which(nll == min(nll))
mat[which(nll == min(nll)), ]
# Alternative 2: Use canned R functions glm as a shortcut
(fm <- glm(z ~ vegHt, family = binomial)$coef)
# Get variance covariance matrix
Vc <- solve(optOut$hessian)
# Extract asymptotic SEs
ASE <- sqrt(diag(Vc))
print(ASE)
# Compare to SEs reported by glm() function (output thinned)
summary(glm(z ~ vegHt, family = binomial))
# Make a table with estimates, SEs, and 95% CI
mleTable <- data.frame(Est = mles,
# Make a table with estimates, SEs, and 95% CI
mleTable <- data.frame(Est = mles,
ASE = sqrt(diag(solve(optOut$hessian))))
# Make a table with estimates, SEs, and 95% CI
mleTable <- data.frame(Est = mles,
ASE = sqrt(diag(solve(optOut$hessian))))
# Make a table with estimates, SEs, and 95% CI
mleTable <- data.frame(Est = mles,
ASE = sqrt(diag(solve(optOut$hessian))))
mleTable$lower <- mleTable$Est - 1.96 * mleTable$ASE
mleTable$upper <- mleTable$Est + 1.96 * mleTable$ASE
mleTable
# Plot the actual and estimated response curves
# This is plotting the simulated data we created
plot(vegHt, z, xlab = "Vegetation height", ylab = "Occurrence probability")
# This is the actual response curve
plot(function(x) plogis(beta0 + beta1 * x), 1.1, 3, add = TRUE, lwd = 2)
# This is plotting the estimated response curve using our MLEs
plot(function(x) plogis(mles[1] + mles[2] * x), 1.1, 3, add = TRUE, lwd = 2, col = "blue")
legend(1.1, 0.9, c("Actual", "Estimate"), col = c("black", "blue"), lty = 1, lwd = 2)
