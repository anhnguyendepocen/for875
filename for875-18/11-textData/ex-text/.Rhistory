# Chunk 1: global_options
knitr::opts_chunk$set(comment = NA, tidy = TRUE)
# Chunk 2
richhtml <- readLines("http://blue.for.msu.edu/FOR875/data/Forbes100.html")
# Chunk 3
## TODO: How many lines? How many total characters?
length(richhtml)
sum(nchar(richhtml))
SandS <- scan("http://blue.for.msu.edu/FOR875/data/austen.txt", what = "character", sep = "\n")
SandS <- scan("http://blue.for.msu.edu/FOR875/data/austen.txt", what = "character", sep = "\n")
SandS <- scan("http://blue.for.msu.edu/FOR875/data/austen.txt", what = "character", sep = "\n")
which(SandS == "CHAPTER 1")
which(SandS == "THE END")
SandS[grep("CHAPTER 1", SandS, fixed=TRUE)]
SandS[grep("THE END", SandS, fixed=TRUE)]
SandS <- SandS[which(SandS == "CHAPTER 1"):which(SandS == "THE END")]
head(SandS)
tail(SandS)
length(SandS)
##TODO: Rewrite print_primes here and demonstrate its use with arguments 10 and 29
print_primes <- function(n){
position <- 1
for(i in 2:n){
if(is.prime(i)) {
cat(paste("Prime Number", position, "is", i, "\n"))
i <- i+1}
position <- position+1
}
}
print_primes(10)
# Chunk 1: global_options
knitr::opts_chunk$set(comment = NA, tidy = TRUE)
# Chunk 2
richhtml <- readLines("http://blue.for.msu.edu/FOR875/data/Forbes100.html")
# Chunk 3
## TODO: How many lines? How many total characters?
length(richhtml)
sum(nchar(richhtml))
# Chunk 4
SandS <- scan("http://blue.for.msu.edu/FOR875/data/austen.txt", what = "character", sep = "\n")
# Chunk 5
## TODO: Add code that finds the elements corresponding to "CHAPTER 1" and "THE END", you can use one line of code for each query
which(SandS == "CHAPTER 1")
which(SandS == "THE END")
# Chunk 6
## TODO: reomve the extrainious beggining and ending text and reassgin vector from "CHAPTER 1"" to "THE END"" back to SandS
SandS <- SandS[which(SandS == "CHAPTER 1"):which(SandS == "THE END")]
head(SandS)
tail(SandS)
length(SandS)
# Chunk 7
is.prime <- function(num) {
if (num == 2) {
TRUE
} else if (any(num %% 2:(sqrt(num)) == 0)) {
FALSE
} else {
TRUE
}
}
is.prime(2)
is.prime(3)
is.prime(4)
is.prime(101)
is.prime(115)
# Chunk 8
##TODO: Write the print_primes function here, and demonstrate its use with arguments 10 and 29
print_primes <- function(n){
for(i in 2:n){
if(is.prime(i)) {print(i)}
}
}
print_primes(19)
print_primes(29)
##TODO: Rewrite print_primes here and demonstrate its use with arguments 10 and 29
print_primes <- function(n){
position <- 1
for(i in 2:n){
if(is.prime(i)) {
cat(paste("Prime Number", position, "is", i, "\n"))
i <- i+1}
position <- position+1
}
}
print_primes(10)
##TODO: Rewrite print_primes here and demonstrate its use with arguments 10 and 29
print_primes <- function(n){
position <- 1
for(i in 2:n){
if(is.prime(i)) {
paste("Prime Number", position, "is", i, "\n")
i <- i+1}
position <- position+1
}
}
print_primes(10)
##TODO: Rewrite print_primes here and demonstrate its use with arguments 10 and 29
print_primes <- function(n){
position <- 1
for(i in 2:n){
if(is.prime(i)) {
paste("Prime Number", position, "is", i, "\n")
i <- i+1}
position <- position+1
}
}
print_primes(10)
##TODO: Rewrite print_primes here and demonstrate its use with arguments 10 and 29
print_primes <- function(n){
position <- 1
for(i in 2:n){
if(is.prime(i)) {
print(paste("Prime Number", position, "is", i, "\n"))
i <- i+1}
position <- position+1
}
}
print_primes(10)
print_primes <- function(n){
position <- 1
for(i in 2:n){
if(is.prime(i)) {
print(paste("Prime Number", position, "is", i))
i <- i+1}
position <- position+1
}
}
print_primes(10)
?cat
##TODO: Rewrite print_primes here and demonstrate its use with arguments 10 and 29
print_primes <- function(n){
position <- 1
for(i in 2:n){
if(is.prime(i)) {
print(paste("Prime Number", position, "is", i))
i <- i+1}
position <- position+1
}
}
print_primes(10)
##TODO: If needed, rewrite print_primes here to give out put without quotes and the preceeding [1]
print_primes <- function(n){
position <- 1
for(i in 2:n){
if(is.prime(i)) {
cat(paste("Prime Number", position, "is", i, "\n"))
i <- i+1}
position <- position+1
}
}
print_primes(10)
# Chunk 1: global_options
knitr::opts_chunk$set(comment = NA, tidy = TRUE)
# Chunk 2
richhtml <- readLines("http://blue.for.msu.edu/FOR875/data/Forbes100.html")
# Chunk 3
## TODO: How many lines? How many total characters?
length(richhtml)
sum(nchar(richhtml))
# Chunk 4
SandS <- scan("http://blue.for.msu.edu/FOR875/data/austen.txt", what = "character", sep = "\n")
# Chunk 5
## TODO: Add code that finds the elements corresponding to "CHAPTER 1" and "THE END", you can use one line of code for each query
which(SandS == "CHAPTER 1")
which(SandS == "THE END")
# Chunk 6
## TODO: reomve the extrainious beggining and ending text and reassgin vector from "CHAPTER 1"" to "THE END"" back to SandS
SandS <- SandS[which(SandS == "CHAPTER 1"):which(SandS == "THE END")]
head(SandS)
tail(SandS)
length(SandS)
# Chunk 7
is.prime <- function(num) {
if (num == 2) {
TRUE
} else if (any(num %% 2:(sqrt(num)) == 0)) {
FALSE
} else {
TRUE
}
}
is.prime(2)
is.prime(3)
is.prime(4)
is.prime(101)
is.prime(115)
# Chunk 8
##TODO: Write the print_primes function here, and demonstrate its use with arguments 10 and 29
print_primes <- function(n){
for(i in 2:n){
if(is.prime(i)) {print(i)}
}
}
print_primes(19)
print_primes(29)
# Chunk 9
##TODO: Rewrite print_primes here and demonstrate its use with arguments 10 and 29
print_primes <- function(n){
position <- 1
for(i in 2:n){
if(is.prime(i)) {
print(paste("Prime Number", position, "is", i))
i <- i+1}
position <- position+1
}
}
print_primes(10)
# Chunk 10
##TODO: If needed, rewrite print_primes here to give out put without quotes and the preceeding [1]
print_primes <- function(n){
position <- 1
for(i in 2:n){
if(is.prime(i)) {
cat(paste("Prime Number", position, "is", i, "\n"))
i <- i+1}
position <- position+1
}
}
print_primes(10)
SandS <- paste(SandS, collapse = " ")
str(SandS)
SandS <- paste(SandS, collapse = " ")
str(SandS)
# Chunk 1: global_options
knitr::opts_chunk$set(comment = NA, tidy = TRUE)
# Chunk 2
richhtml <- readLines("http://blue.for.msu.edu/FOR875/data/Forbes100.html")
# Chunk 3
## TODO: How many lines? How many total characters?
length(richhtml)
sum(nchar(richhtml))
# Chunk 4
SandS <- scan("http://blue.for.msu.edu/FOR875/data/austen.txt", what = "character", sep = "\n")
# Chunk 5
## TODO: Add code that finds the elements corresponding to "CHAPTER 1" and "THE END", you can use one line of code for each query
which(SandS == "CHAPTER 1")
which(SandS == "THE END")
# Chunk 6
## TODO: reomve the extrainious beggining and ending text and reassgin vector from "CHAPTER 1"" to "THE END"" back to SandS
SandS <- SandS[which(SandS == "CHAPTER 1"):which(SandS == "THE END")]
head(SandS)
tail(SandS)
length(SandS)
# Chunk 7
is.prime <- function(num) {
if (num == 2) {
TRUE
} else if (any(num %% 2:(sqrt(num)) == 0)) {
FALSE
} else {
TRUE
}
}
is.prime(2)
is.prime(3)
is.prime(4)
is.prime(101)
is.prime(115)
# Chunk 8
##TODO: Write the print_primes function here, and demonstrate its use with arguments 10 and 29
print_primes <- function(n){
for(i in 2:n){
if(is.prime(i)) {print(i)}
}
}
print_primes(19)
print_primes(29)
# Chunk 9
##TODO: Rewrite print_primes here and demonstrate its use with arguments 10 and 29
print_primes <- function(n){
position <- 1
for(i in 2:n){
if(is.prime(i)) {
print(paste("Prime Number", position, "is", i))
i <- i+1}
position <- position+1
}
}
print_primes(10)
# Chunk 10
##TODO: If needed, rewrite print_primes here to give out put without quotes and the preceeding [1]
print_primes <- function(n){
position <- 1
for(i in 2:n){
if(is.prime(i)) {
cat(paste("Prime Number", position, "is", i, "\n"))
i <- i+1}
position <- position+1
}
}
print_primes(10)
length(SandS)
# Chunk 1: global_options
knitr::opts_chunk$set(comment = NA, tidy = TRUE)
# Chunk 2
richhtml <- readLines("http://blue.for.msu.edu/FOR875/data/Forbes100.html")
# Chunk 3
## TODO: How many lines? How many total characters?
length(richhtml)
sum(nchar(richhtml))
# Chunk 4
SandS <- scan("http://blue.for.msu.edu/FOR875/data/austen.txt", what = "character", sep = "\n")
# Chunk 5
## TODO: Add code that finds the elements corresponding to "CHAPTER 1" and "THE END", you can use one line of code for each query
which(SandS == "CHAPTER 1")
which(SandS == "THE END")
# Chunk 6
## TODO: reomve the extrainious beggining and ending text and reassgin vector from "CHAPTER 1"" to "THE END"" back to SandS
SandS <- SandS[which(SandS == "CHAPTER 1"):which(SandS == "THE END")]
head(SandS)
tail(SandS)
length(SandS)
# Chunk 7
SandS <- paste(SandS, collapse = " ")
str(SandS)
cat(SandS, file = "Sense and Sensibility.txt")
# Chunk 1: global_options
knitr::opts_chunk$set(comment = NA, tidy = TRUE)
# Chunk 2
richhtml <- readLines("http://blue.for.msu.edu/FOR875/data/Forbes100.html")
# Chunk 3
## TODO: How many lines? How many total characters?
length(richhtml)
sum(nchar(richhtml))
# Chunk 4
SandS <- scan("http://blue.for.msu.edu/FOR875/data/austen.txt", what = "character", sep = "\n")
# Chunk 5
## TODO: Add code that finds the elements corresponding to "CHAPTER 1" and "THE END", you can use one line of code for each query
which(SandS == "CHAPTER 1")
which(SandS == "THE END")
# Chunk 6
## TODO: reomve the extrainious beggining and ending text and reassgin vector from "CHAPTER 1"" to "THE END"" back to SandS
SandS <- SandS[which(SandS == "CHAPTER 1"):which(SandS == "THE END")]
head(SandS)
tail(SandS)
length(SandS)
cat(SandS, file = "Sense and Sensibility.txt")
# Chunk 1: global_options
knitr::opts_chunk$set(comment = NA, tidy = TRUE)
# Chunk 2
richhtml <- readLines("http://blue.for.msu.edu/FOR875/data/Forbes100.html")
# Chunk 3
## TODO: How many lines? How many total characters?
length(richhtml)
sum(nchar(richhtml))
# Chunk 4
SandS <- scan("http://blue.for.msu.edu/FOR875/data/austen.txt", what = "character", sep = "\n")
# Chunk 5
## TODO: Add code that finds the elements corresponding to "CHAPTER 1" and "THE END", you can use one line of code for each query
which(SandS == "CHAPTER 1")
which(SandS == "THE END")
# Chunk 6
## TODO: reomve the extrainious beggining and ending text and reassgin vector from "CHAPTER 1"" to "THE END"" back to SandS
SandS <- SandS[which(SandS == "CHAPTER 1"):which(SandS == "THE END")]
head(SandS)
tail(SandS)
length(SandS)
cat(SandS, file = "Sense and Sensibility.txt")
