list.files("PEF")
library(rgdal)
mu <- readOGR("PEF", "MU-bounds")
class(mu)
class(mu@data)
dim(mu@data)
head(mu@data)
proj4string(mu)
mu <- spTransform(mu, CRS("+proj=longlat +datum=WGS84"))
proj4string(mu)
library(ggmap)
mu.f <- fortify(mu, region = "mu_id")
head(mu.f)
mu.bbox <- bbox(mu)
basemap <- get_map(location = mu.bbox, zoom = 14, maptype = "satellite")
ggmap(basemap) +
geom_polygon(data = mu.f, aes(x = long, y = lat, group = group),
fill = NA, size = 0.2, color = "orange")
plots <- read.csv("PEF/plots.csv", stringsAsFactors = FALSE)
str(plots)
coordinates(plots) <- ~easting + northing
class(plots)
proj4string(plots)
proj4string(plots) <- CRS("+proj=utm +zone=19 +datum=NAD83 +units=m
+no_defs +ellps=GRS80 +towgs84=0,0,0")
plots <- spTransform(plots, CRS("+proj=longlat +datum=WGS84"))
ggmap(basemap) +
geom_polygon(data = mu.f, aes(x = long, y = lat, group = group),
fill = NA, size = 0.2, color = "orange") +
geom_point(data = as.data.frame(plots),
aes(x = easting, y = northing, color = biomass_mg_ha)) +
scale_color_gradient(low = "white", high = "darkblue") +
labs(color = "Biomass (mg/ha)")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%
addMarkers(lng = -84.482004, lat = 42.727516,
popup = "<b>Here I am!</b>")
m
library(raster)
library(dplyr)
pef.centroid <- as.data.frame(plots) %>%
summarize(mu.x = mean(easting), mu.y = mean(northing))
srtm <- getData("SRTM", lon = pef.centroid[1], lat = pef.centroid[2])
class(srtm)
library(utils)
srtm <- getData("SRTM", lon = pef.centroid[1], lat = pef.centroid[2])
?getData
library(Rcpp)
sourceCpp("hello.cpp")
install.packages(c("Rcpp", "microbenchmark"))
library(Rcpp)
sourceCpp("hello.cpp")
x <- seq(0, 1, .05)
plot(x, sin(x))
x <- seq(0, pi, .05)
plot(x, sin(x))
x <- seq(0, 2 * pi, .05)
plot(x, sin(x))
plot(x, sin(x), lty = 1)
x <- seq(0, 2 * pi, .05)
plot(x, sin(x), lty = 1)
plot(x, sin(x), lty = 2)
library(ggplot)
library(ggplot2)
ggplot(mapping = aes(x, sin(x))) +
geom_line()
ggplot(mapping = aes(x, sin(x))) +
geom_point()
x <- seq(0, 2 * pi, .1)
ggplot(mapping = aes(x, sin(x))) +
geom_point()
library(seewave)
example(ftwindow)
x <- 1:512
ggplot(aes(x)) +
geom_line(aes(y = b, color = "Bartlett")) +
geom_line(aes(y = c, color = "Blackman")) +
geom_line(aes(y = d, color = "Flattop")) +
geom_line(aes(y = e, color = "Hanning")) +
geom_line(aes(y = f, color = "Rectangle"))
library(ggplot2)
x <- 1:512
ggplot(aes(x)) +
geom_line(aes(y = b, color = "Bartlett")) +
geom_line(aes(y = c, color = "Blackman")) +
geom_line(aes(y = d, color = "Flattop")) +
geom_line(aes(y = e, color = "Hanning")) +
geom_line(aes(y = f, color = "Rectangle"))
lowButter <- butter(2, 1/50, type = "low")
low <- filter(lowButter, originalSignal)
library(signal)
lowButter <- butter(2, 1/50, type = "low")
low <- filter(lowButter, originalSignal)
highButter <- butter(2, 1/25, type = "high")
high <- filter(highButter, originalSignal)
signals <- data_frame(originalSignal, low, high)
ggplot(signals, aes(t)) +
geom_line(aes(y = originalSignal, color = "Original")) +
geom_line(aes(y = low, color = "Noise")) +
geom_line(aes(y = high, color = "Signal")) +
labs(x = "Time", y = "Signal")
library(ggplot2)
library(signal)
example(ftwindow)
all<-cbind(a,b,c,d,e,f)
matplot(all,type="l",col=1:6,lty=1:6)
legend(legend=c("hamming","bartlett","blackman","flattop","hanning","rectangle"),
x=380,y=0.95,col=1:6,lty=1:6,cex=0.75)
library(soundecology)
data(tropicalsound)
spectro(tropicalsound)
?spectro
data(tico)
spectro(tico)
spectro(tico, f = 22050)
library(signal)
example(ftwindow)
all<-cbind(a,b,c,d,e,f)
x <- seq(0, 2 * pi, .05)
library(ggplot2)
ggplot(mapping = aes(x, sin(x))) +
geom_line()
x <- seq(0, 2 * pi, .1)
ggplot(mapping = aes(x, sin(x))) +
geom_point()
library(signal)
t <- seq(0, 1, len = 100)
sig <- sin(2 * pi * t)
ggplot(mapping = aes(t, sig)) +
geom_line()
noisySig <- sin(2 * pi * t) + 0.25 * rnorm(length(t))
ggplot() +
geom_line(aes(t, noisySig), color = "red")
butterFilter <- butter(3, 0.1)
recoveredSig <- filter(butterFilter, noisySig)
allSignals <- data_frame(t, sig, noisySig, recoveredSig)
ggplot(allSignals, aes(t)) +
geom_line(aes(y = sig, color = "Original")) +
geom_line(aes(y = noisySig, color = "Noisy")) +
geom_line(aes(y = recoveredSig, color = "Recovered")) +
labs(x = "Time", y = "Signal")
library(dplyr)
butterFilter <- butter(3, 0.1)
recoveredSig <- filter(butterFilter, noisySig)
recoveredSig <- signal::filter(butterFilter, noisySig)
allSignals <- data_frame(t, sig, noisySig, recoveredSig)
ggplot(allSignals, aes(t)) +
geom_line(aes(y = sig, color = "Original")) +
geom_line(aes(y = noisySig, color = "Noisy")) +
geom_line(aes(y = recoveredSig, color = "Recovered")) +
labs(x = "Time", y = "Signal")
t <- 1:500
cleanSignal <- 50 * sin(t * 4 * pi/length(t))
noise <- 50 * 1/12 * sin(t * 4 * pi/length(t) * 12)
originalSignal <- cleanSignal + noise
ggplot() +
geom_line(aes(t, originalSignal))
lowButter <- butter(2, 1/50, type = "low")
low <- filter(lowButter, originalSignal)
lowButter <- butter(2, 1/50, type = "low")
low <- signal::filter(lowButter, originalSignal)
highButter <- butter(2, 1/25, type = "high")
high <- signal::filter(highButter, originalSignal)
signals <- data_frame(originalSignal, low, high)
ggplot(signals, aes(t)) +
geom_line(aes(y = originalSignal, color = "Original")) +
geom_line(aes(y = low, color = "Noise")) +
geom_line(aes(y = high, color = "Signal")) +
labs(x = "Time", y = "Signal")
example(ftwindow)
library(seewave)
example(ftwindow)
all<-cbind(a,b,c,d,e,f)
matplot(all,type="l",col=1:6,lty=1:6)
legend(legend=c("hamming","bartlett","blackman","flattop","hanning","rectangle"),
x=380,y=0.95,col=1:6,lty=1:6,cex=0.75)
data(tico)
spectro(tico, f = 22050)
play(tico, "play")
library(tuneR)
play(tico, "play")
play(tico, "aplay")
play(tico, "aplay")
play(tico, "aplay")
play(tico, "aplay")
play(tico, "aplay")
?play
library(warbleR)
cedarWax <- quer_xc(qword = "Bombycilla cedrorum",
download = FALSE)
head(cedarWax)
names(cedarWax)
typeof(cedarWax)
xc_maps(X = cedarWax, img = FALSE)
library(warbleR)
table(cedarWax$Vocalization_type)
goodCedarCalls <- cedarWax %>%
filter(Vocalization_type == 'call' & Quality == 'A')
xc_maps(goodCedarCalls, img = FALSE)
cedarWax$Quality
goodCedarCalls <- cedarWax %>%
filter(Vocalization_type == 'call' & Quality %in% c('A', 'B'))
xc_maps(goodCedarCalls, img = FALSE)
?quer_xc
getwd()
install.packages("Rcpp")
library(Rcpp)
library(microbenchmark)
getwd()
library(Rcpp)
sourceCpp("hello.cpp")
sourceCpp("hello.cpp")
hello()
sourceCpp("hello.cpp")
hello()
sourceCpp("hello.cpp")
sourceCpp("hello.cpp")
hello()
library(Rcpp)
sourceCpp("hello.cpp")
hello()
sourceCpp("hello.cpp")
sourceCpp("hello.cpp")
library(Rcpp)
sourceCpp("hello.cpp")
sourceCpp("hello.cpp")
hello()
cppFunction("int add(int x, int y, int z){
int sum = x + y + z;
return sum;
}")
add(124)
add(1, 2, 4)
sourceCpp("hello.cpp")
sourceCpp("int signC(int x) {
if (x > 0) {
return 1;
} else if (x == 0) {
return 0;
} else {
return -1;
}
}")
sourceCpp("int signC(int x) {
if (x > 0) {
return 1;
} else if (x == 0) {
return 0;
} else {
return -1;
}
}")
cppFunction("int signC(int x) {
if (x > 0) {
return 1;
} else if (x == 0) {
return 0;
} else {
return -1;
}
}")
sumR <- function(x) {
total <- 0
for (i in 1:length(x)) {
total <- total + x[i]
}
total
}
cppFunction("double sumC(NumericVector x) {
int n = x.size();
double total = 0;
for(int i = 0; i < n; i++) {
total += x[i];
}
return total;
}")
library(microbenchmark)
x <- runif(1000)
microbenchmark(sum(x), sumC(x), sumR(x))
richhtml <- readLines("http://blue.for.msu.edu/FOR875/data/Forbes100.html")
## TODO: How many lines? How many total characters?
length(richhtml)
# There are 1992 lines in the file
sum(nchar(richhtml))
SandS <- scan("http://blue.for.msu.edu/FOR875/data/austen.txt", what = "character", sep = "\n")
## TODO: Add code that finds the elements corresponding to "CHAPTER 1" and "THE END", you can use one line of code for each query
which(SandS == "CHAPTER 1")
which(SandS == "THE END")
## TODO: remove the extraneous beginning and ending text and reassign vector from "CHAPTER 1"" to "THE END"" back to SandS
SandS <- SandS[17:10609]
head(SandS)
tail(SandS)
length(SandS)
SandS <- paste(SandS, collapse = " ")
length(SandS)
is.prime <- function(num) {
if (num == 2) {
TRUE
} else if (any(num %% 2:(sqrt(num)) == 0)) {
FALSE
} else {
TRUE
}
}
##TODO: Write the print_primes function here, and demonstrate its use with arguments 10 and 29
print_primes <- function(n) {
for (i in 2:n) {
if (is.prime(i)) {
print(n)
}
}
}
print_primes(10)
##TODO: Write the print_primes function here, and demonstrate its use with arguments 10 and 29
print_primes <- function(n) {
for (i in 2:n) {
if (is.prime(i)) {
print(i)
}
}
}
print_primes(10)
print_primes(29)
##TODO: Rewrite print_primes here and demonstrate its use with arguments 10 and 29
print_primes <- function(n) {
counter = 0
for (i in 2:n) {
if (is.prime(i)) {
counter = counter + 1
print(paste("Prime Number", counter, "is", i))
}
}
}
print_primes(10)
print_primes(29)
##TODO: If needed, rewrite print_primes here to give out put without quotes and the preceeding [1]
print_primes <- function(n) {
counter = 0
for (i in 2:n) {
if (is.prime(i)) {
counter = counter + 1
cat(paste("Prime Number", counter, "is", i), quote = FALSE)
}
}
}
print_primes(10)
##TODO: If needed, rewrite print_primes here to give out put without quotes and the preceeding [1]
print_primes <- function(n) {
counter = 0
for (i in 2:n) {
if (is.prime(i)) {
counter = counter + 1
cat(paste("Prime Number", counter, "is", i, "\n"), quote = FALSE)
}
}
}
print_primes(10)
##TODO: If needed, rewrite print_primes here to give out put without quotes and the preceeding [1]
print_primes <- function(n) {
counter = 0
for (i in 2:n) {
if (is.prime(i)) {
counter = counter + 1
cat(paste("Prime Number", counter, "is", i, "\n"))
}
}
}
print_primes(10)
?substr
##TODO: extract characters as described above
substr(x, 3, 5)
x <- c("abcdefg", "123456789", "cats and dogs", "Michigan")
##TODO: extract characters as described above
substr(x, 3, 5)
##TODO: trim x as described above
strtrim(x, c(4, 4, 7, 5))
?butter
library(signal)
?butter
x <- seq(0, 2 * pi, .1)
ggplot(mapping = aes(x, sin(x))) +
geom_point() +
ggtitle("Standard Sine Wave")
library(ggplot2)
ggplot(mapping = aes(x, sin(x))) +
geom_point() +
ggtitle("Standard Sine Wave")
ggplot(mapping = aes(x, 2*sin(3 * (x - 1)) + d)) +
geom_point()
ggplot(mapping = aes(x, 2*sin(3 * (x - 1)) + 4)) +
geom_point()
x <- seq(0, 2 * pi, .1)
ggplot(mapping = aes(x, sin(x))) +
geom_point() +
ggtitle("Standard Sine Wave")
standard <- sin(x)
altered <- 2*sin(3 * (x - 1)) + 4
graphData <- dplyr::data_frame(x, standard, altered)
ggplot(data = graphData, mapping = aes(x)) +
geom_point(data = standard) +
geom_point(data = altered)
typeof(graphData)
head(graphData)
graphData
?geom_point
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard)) +
geom_point(mapping = aes(y = altered))
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard), color = "blue") +
geom_point(mapping = aes(y = altered), color = "red")
?scale_color_manual
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard), color = "blue") +
geom_point(mapping = aes(y = altered), color = "red") +
scale_color_manual(breaks = c("sin(x)", "2*sin(3 * (x - 1)) + 4"),
values = c("blue", "red"))
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard, color = "sin(x)")) +
geom_point(mapping = aes(y = altered, color = "2*sin(3 * (x - 1)) + 4")) +
scale_color_manual(breaks = c("sin(x)", "2*sin(3 * (x - 1)) + 4"),
values = c("blue", "red"))
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard, color = "sin(x)")) +
geom_point(mapping = aes(y = altered, color = "2*sin(3 * (x - 1)) + 4")) +
scale_color_manual("", breaks = c("sin(x)", "2*sin(3 * (x - 1)) + 4"),
values = c("blue", "red"))
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard, color = "sin(x)")) +
geom_point(mapping = aes(y = altered, color = "2*sin(3 * (x - 1)) + 4")) +
scale_color_manual("", breaks = c("sin(x)", "2*sin(3 * (x - 1)) + 4"),
values = c("blue", "red")) +
labs(x = "x", y = "")
library(ggplot2)
logistic <- function(x) {
exp(x)/(1 + exp(x))
}
ggplot(data.frame(x = c(-6, 6)), aes(x)) +
stat_function(fun = logistic)
library(MASS)
hea(Pima.tr)
head(Pima.tr)
Pima.tr$diabetes <- rep(0, dim(Pima.tr)[1])
Pima.tr$diabetes[Pima.tr$type == "Yes"] <- 1
head(Pima.tr)
diabetes.lr1 <- glm(diabetes ~ glu, data = Pima.tr, family = binomial)
diabetes.lr1
summary(diabetes.lr1)
exp(-5.504 + 0.038 * 150)/(1 + exp(-5.504 + 0.038 * 150))
head(Pima.te)
diabetes.probs.1 <- predict(diabetes.lr1, Pima.te, type = "response")
head(diabetes.probs.1)
diabetes.predict.1 <- rep("No", dim(Pima.te)[1])
diabetes.predict.1[diabetes.probs.1 > 0.5] <- "Yes"
head(diabetes.predict.1)
table(diabetes.predict.1, Pima.te$type)
length(diabetes.predict.1[diabetes.predict.1 == Pima.te$type])/
dim(Pima.te)[1]
data(iris)
set.seed(321)
selecte <- sample(1:150, replace = FALSE, size = 75)
selected <- sample(1:150, replace = FALSE, size = 75)
iris.train <- iris[selected, ]
iris.test <- iris[-selected, ]
install.packages("VGAM")
library(VGAM)
iris.lr <- vglm(Species ~ Petal.Width + Petal.Length,
data = iris.train, family = multinomial)
summary(iris.lr)
iris.probs <- predict(iris.lr, iris.test[, c(3, 4)], type = "response")
head(iris.probs)
?which.max
library(warbleR)
cedarWax <- quer_xc(qword = "Bombycilla cedrorum",
download = FALSE)
names(cedarWax)
xc_maps(X = cedarWax, img = FALSE)
setwd("~/Documents/01-summer2018/01-for875/14-signalProcessing")
table(cedarWax$Vocalization_type)
newCedarWax <- subset(cedarWax, cedarWax$Recording_ID %in% c(313682, 313683, 313684, 321881, 329907, 361006))
quer_xc(X = newCedarWax)
mp32wav()
?rm
system("rm *.mp3")
lspec(ovlp = 10, it = "tiff")
wavs <- list.files(pattern = ".wav", ignore.case = TRUE)
supset <- wavs[1]
autodetec(flist = supset, bp = c(4, 10), threshold = 10, mindur = 0.05,
maxdur = 0.5,ssmooth = 800, ls = TRUE,
res = 100, flim = c(1, 12), wl = 300, set =TRUE, sxrow = 6,
rows = 15, redo = TRUE, it = "jpg", img =TRUE, smadj = "end")
autodetec(flist = supset, bp = c(4, 10), threshold = 10, mindur = 0.05,
maxdur = 0.5,ssmooth = 800, ls = TRUE,
res = 100, flim = c(1, 12), wl = 300, set =TRUE, sxrow = 6,
rows = 15, redo = TRUE, it = "jpeg", img =TRUE, smadj = "end")
supset <- wavs[2]
autodetec(flist = supset, bp = c(4, 10), threshold = 10, mindur = 0.05,
maxdur = 0.5,ssmooth = 800, ls = TRUE,
res = 100, flim = c(1, 12), wl = 300, set =TRUE, sxrow = 6,
rows = 15, redo = TRUE, it = "jpeg", img =TRUE, smadj = "end")
this.dir <- dirname(parent.frame(2)$ofile)
setwd(getSrcDirectory()[1])
?getSrcDirectory
setwd(getSrcDirectory("14-signalProcessing.Rnw")[1])
install.packages("here")
here::here()
script.cir <- dirname(sys.frame(1)$ofile)
rstudioapi::getSourceEditorContext()$path
library(rstudioapi)
?getSourceEditorContext
getwd()
