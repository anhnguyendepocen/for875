x <- runif(1000)
microbenchmark(sum(x), sumC(x), sumR(x))
richhtml <- readLines("http://blue.for.msu.edu/FOR875/data/Forbes100.html")
## TODO: How many lines? How many total characters?
length(richhtml)
# There are 1992 lines in the file
sum(nchar(richhtml))
SandS <- scan("http://blue.for.msu.edu/FOR875/data/austen.txt", what = "character", sep = "\n")
## TODO: Add code that finds the elements corresponding to "CHAPTER 1" and "THE END", you can use one line of code for each query
which(SandS == "CHAPTER 1")
which(SandS == "THE END")
## TODO: remove the extraneous beginning and ending text and reassign vector from "CHAPTER 1"" to "THE END"" back to SandS
SandS <- SandS[17:10609]
head(SandS)
tail(SandS)
length(SandS)
SandS <- paste(SandS, collapse = " ")
length(SandS)
is.prime <- function(num) {
if (num == 2) {
TRUE
} else if (any(num %% 2:(sqrt(num)) == 0)) {
FALSE
} else {
TRUE
}
}
##TODO: Write the print_primes function here, and demonstrate its use with arguments 10 and 29
print_primes <- function(n) {
for (i in 2:n) {
if (is.prime(i)) {
print(n)
}
}
}
print_primes(10)
##TODO: Write the print_primes function here, and demonstrate its use with arguments 10 and 29
print_primes <- function(n) {
for (i in 2:n) {
if (is.prime(i)) {
print(i)
}
}
}
print_primes(10)
print_primes(29)
##TODO: Rewrite print_primes here and demonstrate its use with arguments 10 and 29
print_primes <- function(n) {
counter = 0
for (i in 2:n) {
if (is.prime(i)) {
counter = counter + 1
print(paste("Prime Number", counter, "is", i))
}
}
}
print_primes(10)
print_primes(29)
##TODO: If needed, rewrite print_primes here to give out put without quotes and the preceeding [1]
print_primes <- function(n) {
counter = 0
for (i in 2:n) {
if (is.prime(i)) {
counter = counter + 1
cat(paste("Prime Number", counter, "is", i), quote = FALSE)
}
}
}
print_primes(10)
##TODO: If needed, rewrite print_primes here to give out put without quotes and the preceeding [1]
print_primes <- function(n) {
counter = 0
for (i in 2:n) {
if (is.prime(i)) {
counter = counter + 1
cat(paste("Prime Number", counter, "is", i, "\n"), quote = FALSE)
}
}
}
print_primes(10)
##TODO: If needed, rewrite print_primes here to give out put without quotes and the preceeding [1]
print_primes <- function(n) {
counter = 0
for (i in 2:n) {
if (is.prime(i)) {
counter = counter + 1
cat(paste("Prime Number", counter, "is", i, "\n"))
}
}
}
print_primes(10)
?substr
##TODO: extract characters as described above
substr(x, 3, 5)
x <- c("abcdefg", "123456789", "cats and dogs", "Michigan")
##TODO: extract characters as described above
substr(x, 3, 5)
##TODO: trim x as described above
strtrim(x, c(4, 4, 7, 5))
?butter
library(signal)
?butter
x <- seq(0, 2 * pi, .1)
ggplot(mapping = aes(x, sin(x))) +
geom_point() +
ggtitle("Standard Sine Wave")
library(ggplot2)
ggplot(mapping = aes(x, sin(x))) +
geom_point() +
ggtitle("Standard Sine Wave")
ggplot(mapping = aes(x, 2*sin(3 * (x - 1)) + d)) +
geom_point()
ggplot(mapping = aes(x, 2*sin(3 * (x - 1)) + 4)) +
geom_point()
x <- seq(0, 2 * pi, .1)
ggplot(mapping = aes(x, sin(x))) +
geom_point() +
ggtitle("Standard Sine Wave")
standard <- sin(x)
altered <- 2*sin(3 * (x - 1)) + 4
graphData <- dplyr::data_frame(x, standard, altered)
ggplot(data = graphData, mapping = aes(x)) +
geom_point(data = standard) +
geom_point(data = altered)
typeof(graphData)
head(graphData)
graphData
?geom_point
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard)) +
geom_point(mapping = aes(y = altered))
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard), color = "blue") +
geom_point(mapping = aes(y = altered), color = "red")
?scale_color_manual
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard), color = "blue") +
geom_point(mapping = aes(y = altered), color = "red") +
scale_color_manual(breaks = c("sin(x)", "2*sin(3 * (x - 1)) + 4"),
values = c("blue", "red"))
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard, color = "sin(x)")) +
geom_point(mapping = aes(y = altered, color = "2*sin(3 * (x - 1)) + 4")) +
scale_color_manual(breaks = c("sin(x)", "2*sin(3 * (x - 1)) + 4"),
values = c("blue", "red"))
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard, color = "sin(x)")) +
geom_point(mapping = aes(y = altered, color = "2*sin(3 * (x - 1)) + 4")) +
scale_color_manual("", breaks = c("sin(x)", "2*sin(3 * (x - 1)) + 4"),
values = c("blue", "red"))
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard, color = "sin(x)")) +
geom_point(mapping = aes(y = altered, color = "2*sin(3 * (x - 1)) + 4")) +
scale_color_manual("", breaks = c("sin(x)", "2*sin(3 * (x - 1)) + 4"),
values = c("blue", "red")) +
labs(x = "x", y = "")
library(ggplot2)
logistic <- function(x) {
exp(x)/(1 + exp(x))
}
ggplot(data.frame(x = c(-6, 6)), aes(x)) +
stat_function(fun = logistic)
library(MASS)
hea(Pima.tr)
head(Pima.tr)
Pima.tr$diabetes <- rep(0, dim(Pima.tr)[1])
Pima.tr$diabetes[Pima.tr$type == "Yes"] <- 1
head(Pima.tr)
diabetes.lr1 <- glm(diabetes ~ glu, data = Pima.tr, family = binomial)
diabetes.lr1
summary(diabetes.lr1)
exp(-5.504 + 0.038 * 150)/(1 + exp(-5.504 + 0.038 * 150))
head(Pima.te)
diabetes.probs.1 <- predict(diabetes.lr1, Pima.te, type = "response")
head(diabetes.probs.1)
diabetes.predict.1 <- rep("No", dim(Pima.te)[1])
diabetes.predict.1[diabetes.probs.1 > 0.5] <- "Yes"
head(diabetes.predict.1)
table(diabetes.predict.1, Pima.te$type)
length(diabetes.predict.1[diabetes.predict.1 == Pima.te$type])/
dim(Pima.te)[1]
data(iris)
set.seed(321)
selecte <- sample(1:150, replace = FALSE, size = 75)
selected <- sample(1:150, replace = FALSE, size = 75)
iris.train <- iris[selected, ]
iris.test <- iris[-selected, ]
install.packages("VGAM")
library(VGAM)
iris.lr <- vglm(Species ~ Petal.Width + Petal.Length,
data = iris.train, family = multinomial)
summary(iris.lr)
iris.probs <- predict(iris.lr, iris.test[, c(3, 4)], type = "response")
head(iris.probs)
?which.max
2^16
1^19
2^19
2^14
2^17
2^16
3*12*11*2*12
16*11
8*16
+ 8
?readWave
library(tuneR)
library(bigrquery)
library(DBI)
library(dplyr)
billing <- "for875-databases"
con <- dbConnect(
bigquery(),
project = "publicdata",
dataset = "samples",
billing = billing
)
shakespeare <- con %>%
tbl("shakespeare")
shakespeare %>%
group_by(word) %>%
summarise(n = sum(word_count, na.rm = TRUE)) %>%
arrange(desc(n)) %>%
head(10)
dbl_var <- c(1, 25., 4.5)
# with the L suffix, you get an integer rather than a double
int_var <- c(1L, 6L, 10L)
int_var
dbl_var
c(1, c(2, c(3, 4)))
c(1, 2, 3, 4)
# note that is.numeric() returns true for both integer and double vectors
is.numeric(int_var)
is.numeric(dbl_var)
# Coercion
str(c("a", 1))
mtcars
is.list(mtcars)
head(mtcars)
# 3. Test you rknowledge of vector coercion rules by predicting the output of the following uses of c():
c(1, FALSE) # will be a double vector consisting of 1 and 0
c("a", 1) # will be a char vector consisting of "a" and "1"
c(list(1), "a")
typeof(1)
typeof(1L)
c(TRUE, 1L) # an integer vector consisting of 1 and 0
y <- 1:10
attr(y, "my_attribute") <- "This is a vector"
attr(y, "my_attribute")
str(attributes(y))
str(y)
attributes(y[1])
# you can give names to vectors
x <- c(a = 1, b = 2, c = 3)
x
?structure
#1. An early draft used this code to illustrate structure()
structure(1:5, comment = "my attribute")
#1. An early draft used this code to illustrate structure()
structure(1:5, comment2 = "my attribute")
?comment
#1. An early draft used this code to illustrate structure()
structure(1:5, comment2 = "my attribute")
?structure
# 2 What happens to a factor when you modify its levels?
f1 <- factor(letters)
levels(f1) <- rev(levels(f1))
# 2 What happens to a factor when you modify its levels?
f1 <- factor(letters)
f1
levels(f1) <- rev(levels(f1))
f1
?rev
test <- c(1, 5, 4, 3)
rev(test)
# 3. What does this code do? How do f2 and f3 differ from f1?
f2 <- rev(factor(letters))
f2
# f2 reverses the order of the elements in the factor letters
f3 <- factor(letters, levels = rev(letters))
f3
?factor
?is.ordered
is.ordered(x)
is.ordered(f3)
is.ordered(f1)
is.ordered(letters)
library(maps)
library(htmltools)
library(shiny)
runApp('Documents/01-summer2018/Shiny/exercise')
runApp('~/Documents/01-summer2018/for875-18/09-shiny/ex-shiny')
19.25+23.25
library(shiny)
runExample("01_hello")
runApp('Documents/01-summer2018/01-for875/09-shiny/ex-shiny')
runApp('Documents/01-summer2018/01-for875Notes/05-shinyPractice/09-shiny_chapter_code/CampsitesMI')
runApp('Documents/01-summer2018/for875-18/09-shiny/ex-shiny/solutions')
data
shiny::runApp('Documents/01-summer2018/for875-18/13-databases/ex-databases')
runApp('Documents/01-summer2018/for875-18/13-databases/ex-databases')
shiny::runApp('Documents/01-summer2018/for875-18/13-databases/ex-databases')
library(bigrquery)
library(DBI)
library(dplyr)
billing <- "for875-databases"
con <- dbConnect(
bigquery(),
project = "publicdata",
dataset = "samples",
billing = billing
)
shakespeare <- con %>%
tbl("shakespeare")
shakespeare %>%
group_by(word) %>%
summarise(n = sum(word_count, na.rm = TRUE)) %>%
arrange(desc(n)) %>%
head(10)
weather <- con %>%
tbl("gsod")
dbListFields(con, "gsod")
weather %>%
select(thunder, mean_wind_speed) %>%
head(10)
weather %>%
filter(mean_temp > 60 & mean_wind_speed > 10) %>%
summarize(count = n())
weather %>%
dbplot_line(year, average_wind_speed = mean(mean_wind_speed, na.rm = TRUE))
library(dbplot)
weather %>%
dbplot_line(year, average_wind_speed = mean(mean_wind_speed, na.rm = TRUE))
weather %>%
select(year, mean_wind_speed) %>%
filter(year < 1940 & !is.na(mean_wind_speed)) %>%
dbplot_histogram(mean_wind_speed)
weather %>%
filter(year < 1940 & !is.na(mean_wind_speed)) %>%
group_by(year) %>%
summarize(count = n())
weather %>%
select(year, mean_wind_speed) %>%
filter(year == 1929 & !is.na(mean_wind_speed)) %>%
dbplot_histogram(mean_wind_speed)
b <- array(1:12, c(2, 3, 2))
b
# Exercises
# 1. What does dim() return when applied to a vector?
dim(c(1, 3, 4))
#2. True, since matrices are special forms of arrays
matrix(1:6, nrow = 2, ncol = 2)
#2. True, since matrices are special forms of arrays
a <- matrix(1:6, nrow = 2, ncol = 2)
is.matrix(a)
is.array(a)
# 3.
x1 <- array(1:5, c(1, 1, 5))
x1
# x2
x2 <- array(1:5, c(1, 5, 1))
x2
mtcars
attr(mtcars)
?attr
dim(mtcars)
str(mtcars)
testDF <- data.frame(c(1, 2, 3), c("test", "hello", "jeff"))
as.matrix(testDF)
is.matrix(as.matrix(testDF))
testEmptyDF <- data.frame()
str(testEmptyDF)
# Data Types
x <- c(1, 2, 3)
order(x)
?order
?setNames(())
?setNames()
?outer
18.0/5.0
mtcars
mtcars[mtcars$cyl = 4, ]
mtcars[mtcars$cyl == 4, ]
mtcars[2:4, ]
mtcars[mtcars$cyl <= 5]
mtcars[mtcars$cyl <= 5, ]
mtcars[mtcars$cyl %in% c(4, 6), ]
x <- 1:5
x[NA]
x[NA_real_]
?NA
x <- outer(1:5, 1:5, FUN = "*")
x
x[upper.tri(x)]
?upper.tri
upper.tri(x)
mtcars[1:20]
mtcars[1:20, ]
df[is.na(df)]
mtcars[is.na(mtcars)] <- 0
mtcars[is.na(mtcars)] <- 0
mtcars
data(mtcars)
mtcars
moc <- lm(mpt ~ wt, data = mtcars)
moc <- lm(mpg ~ wt, data = mtcars)
mod <- lm(mpg ~ wt, data = mtcars)
mod
summary(mod)
mod$df.residual
summary(mod)$R
summary(mod)
str(summary(mod))
summary(mod)$r.squared
# 3.4.1
x <- c("m", "f", "u", "f", "f", "m", "m")
lookup <- c(m = "Male", f = "Female", u = NA)
lookup[x]
unname(lookup[x])
str(lookup)
x <- sample(10) < 4
x
which(x)
y <- sample(20)
y[x]
y[which(x)]
y[x]
x
# Optional TODO 17.7: Produce the figure above using the provided guidelines
library(sp)
library(ggmap)
library(soundecology)
multiple_sounds(directory = paste(getwd(), "spatialVarSongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "ndsi",
from = 10, to = 11, units = "minutes")
paste(getwd(), "spatialVarsongs", sep = "/")
setwd("~/Documents/01-summer2018/for875-18/14-signalProcessing/ex-dsp")
multiple_sounds(directory = paste(getwd(), "spatialVarSongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "ndsi",
from = 10, to = 11, units = "minutes")
paste(getwd(), "spatialVarSongs", sep = "/")
multiple_sounds(directory = paste(getwd(), "spatialVarSongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "ndsi",
from = 10, to = 11, units = "minutes")
multiple_sounds(directory = paste(getwd(), "spatialVarSongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "ndsi",
from = 10, to = 11, units = "minutes")
spatialData <- read.csv("spatialVariationData.csv", stringsAsFactors = FALSE)
head(spatialData)
soundMapData <- read.csv("recordingSiteLocations.csv", stringsAsFactors = FALSE)
soundMapData$ndsi <- spatialData$LEFT_CHANNEL
head(soundMapData)
coordinates(soundMapData) <- ~longitude + latitude
soundMapData
proj4string(soundMapData) <- CRS("+proj=longlat +datum=WGS84")
proj4string(soundMapData)
basemap <- get_map(location = "avon, new york", zoom = 10, maptype = "roadmap")
basemap <- get_map(location = "avon, new york", zoom = 10, maptype = "roadmap")
ggmap(basemap) +
geom_point(data = as.data.frame(soundMapData),
aes(x = longitude, y = latitude, color =ndsi), size = 2) +
ggrepel::geom_label_repel(data = as.data.frame(soundMapData),
aes(x = longitude, y = latitude, label = locations), alpha = 0.5) +
scale_color_gradient(low = "red", high = "darkblue")
multiple_sounds(directory = paste(getwd(), "spatialVarSongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "ndsi",
from = 10, to = 11, units = "minutes")
multiple_sounds(directory = paste(getwd(), "tempVarSongs", sep = "/"), resultfile = "data.csv",
soundindex = "acoustic_diversity", max_freq = 16000)
paste(getwd(), "spatialVarSongs", sep = "/")
multiple_sounds(directory = paste(getwd(), "spatialVarSongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "aci",
from = 10, to = 11, units = "minutes")
multiple_sounds(directory = paste(getwd(), "spatialVarSongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "acoustic_diversity",
from = 10, to = 11, units = "minutes")
multiple_sounds(directory = paste(getwd(), "spatialVarSongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "ndsi",
from = 10, to = 11, units = "minutes")
multiple_sounds(directory = paste(getwd(), "testSongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "ndsi",
from = 10, to = 11, units = "minutes")
multiple_sounds(directory = paste(getwd(), "testsongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "ndsi",
from = 10, to = 11, units = "minutes")
?download
library(downloader)
?download
>mode
?mode
download("http://blue.for.msu.edu/FOR875/data/spatialVarSongs.zip",
destfile="./spatialVarSongs.zip")#, mode="wb")
unzip("spatialVarSongs.zip", exdir = ".")
list.files("spatialVarSongs")
multiple_sounds(directory = paste(getwd(), "spatialVarSongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "ndsi",
from = 10, to = 11, units = "minutes")
download("http://blue.for.msu.edu/FOR875/data/tempVarSongs.zip",
destfile="./tempVarSongs.zip", mode="wb")
unzip("tempVarSongs.zip", exdir = ".")
list.files("tempVarSongs")
multiple_sounds(directory = paste(getwd(), "tempVarSongs", sep = "/"), resultfile = "data.csv",
soundindex = "acoustic_diversity", max_freq = 16000)
multiple_sounds(directory = paste(getwd(), "spatialVarSongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "ndsi",
from = 10, to = 11, units = "minutes")
# Optional TODO 17.7: Produce the figure above using the provided guidelines
library(sp)
library(ggmap)
multiple_sounds(directory = paste(getwd(), "spatialVarSongs", sep = "/"),
resultfile = "spatialVariationData.csv", soundindex = "ndsi",
from = 10, to = 11, units = "minutes")
