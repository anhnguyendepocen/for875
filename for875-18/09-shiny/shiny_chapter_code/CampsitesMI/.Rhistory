mp <- ggplot() +   mapWorld +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.line = element_blank()
,axis.text = element_blank()
,axis.title = element_blank()
,axis.ticks = element_blank()
)
#Now Layer the cities on top
mp <- mp+ geom_point(aes(x=visit.x, y=visit.y) ,color="blue", size=3)
mp
source('~/Dropbox/Personal/infographic.R')
mp
visited <- c("Milwaukee", "East Lansing", "Grand Rapids")
ll.visited <- geocode(visited)
visited <- c("Milwaukee", "East Lansing", "Grand Rapids")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
points(visit.x,visit.y, col="red", pch=16)
#Using GGPLOT, plot the Base World Map
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50")
mp <- ggplot() +   mapWorld +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.line = element_blank()
,axis.text = element_blank()
,axis.title = element_blank()
,axis.ticks = element_blank()
)
#Now Layer the cities on top
mp <- mp+ geom_point(aes(x=visit.x, y=visit.y) ,color="blue", size=3)
mp
source('~/Dropbox/Personal/infographic.R')
visited <- c("Milwaukee", "East Lansing", "Grand Rapids")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
points(visit.x,visit.y, col="red", pch=16)
#Using GGPLOT, plot the Base World Map
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50")
mp <- ggplot() +   mapWorld +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.line = element_blank()
,axis.text = element_blank()
,axis.title = element_blank()
,axis.ticks = element_blank()
)
#Now Layer the cities on top
mp <- mp+ geom_point(aes(x=visit.x, y=visit.y) ,color="blue", size=3)
mp
mapWorld <- borders("USA", colour="gray50", fill="gray50")
mp <- ggplot() +   mapWorld +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
mapWorld <- borders("United States", colour="gray50", fill="gray50")
?borders
source('~/Dropbox/Personal/infographic.R')
source('~/Dropbox/Personal/infographic.R')
m  # Print the map
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
?addTiles()
data <- read.csv("~/Downloads/piazza-poll-bulk-download-cse232-Dec-14.csv")
data <- read.csv("~/Downloads/piazza-cse232_stats-Dec-14.csv")
min(1,2)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
photo_T(1)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
photo_T(1)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
photo_T(1)
photo_T(1)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
photo_T(1)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
?apply
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
photoRate(10,10)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/code.R', echo=TRUE)
source('~/GoogleDrive/Spring17/SciDay/test.R', echo=TRUE)
shiny::runApp('cse_881/shinyR/testPhoto')
runApp('cse_881/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
shiny::runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
x <- c(1,2,4,1)
max(x)
?max
pmax(x)
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
runApp('Dropbox/SciDay/shinyR/testPhoto')
shiny::runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
runApp('Dropbox/SciDay/shinyR/testPhoto')
expression(Temperature~(degree*C))
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
character(176)
char(176)
chr(176)
character
?character
as.character(176)
as.character(~deg~)
as.character("~deg~")
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R', echo=TRUE)
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
source('~/Dropbox/SciDay/shinyR/testPhoto/helpers.R')
runApp('Dropbox/SciDay/shinyR/testPhoto')
source('/media/megan/Seagate1/Spring17/CMSE820/project/svm_code.R')
install.packages("caret")
source('/media/megan/Seagate1/Spring17/CMSE820/project/svm_code.R')
install.packages("kernlab")
source('/media/megan/Seagate1/Spring17/CMSE820/project/svm_code.R')
source('/media/megan/Seagate1/Spring17/CMSE820/project/svm_code.R')
source('/media/megan/Seagate1/Spring17/CMSE820/project/svm_code.R')
source('/media/megan/Seagate1/Spring17/CMSE820/project/svm_code.R')
bwplot(rValues,metric="ROC",ylab =c("linear kernel", "radial kernel"))		    # boxplot
library(raster)
list.dirs("/media/megan/backup/Data/")
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
dirs <- list.files("/media/megan/backup/Data/")
print(dirs)
dirs <- list.files("/media/megan/backup/Data/", include.dirs = T)
print(dirs)
acq <- dir[0]
acq <- dirs[0]
acq <- dirs[1]
filePath <- paste0(filePath, acq)
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
metrics <- list.dirs(filePath, full.names = F)
filePath <- paste0(filePath, acq, "/metrics")
metrics <- list.dirs(filePath, full.names = F, recursive = F)
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
plots <- list.files(metricPath, pattern = "*.tif")
metricPath <- paste0(filePath,m)
list.files(metricPath)
metricPath
filePath <- paste0(filePath, acq, "/metrics/")
metrics <- list.dirs(filePath, full.names = F, recursive = F)
for (m in metrics)
{
metricPath <- paste0(filePath,m)
plots <- list.files(metricPath, pattern = "*.tif")
}
metricPath <- paste0(filePath,m)
plots <- list.files(metricPath, pattern = "*.tif")
for (m in metrics[1])
{
metricPath <- paste0(filePath,m)
plots <- list.files(metricPath, pattern = "*.tif")
}
metricPath
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
metricPath
plots <- list.files(metricPath, pattern = paste0("*",m,".tif")
}
plots <- list.files(metricPath, pattern = paste0("*",m,".tif"))
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
?extract
dat <- extract(raster(paste0(metricPath,"/",p)))
nlcd <- "/media/megan/backup/Data/Fire/NLCD_2011/ak_nlcd_2011_landcover_1_15_15.img"
nlcd <- raster(nlcd)
dat <- extract(raster(paste0(metricPath,"/",p)), nlcd)
nlcd <- rasterToPoints(raster(nlcd))
nlcd_sub <- crop(nlcd, extent(raster(paste0(metricPath,"/",p)))
dat <- extract(raster(paste0(metricPath,"/",p)), nlcd)
}
}
nlcd_sub <- crop(nlcd, extent(raster(paste0(metricPath,"/",p))
dat <- extract(raster(paste0(metricPath,"/",p)), nlcd)
}
}
nlcd_sub <- crop(nlcd, extent(raster(paste0(metricPath,"/",p)))
dat <- extract(raster(paste0(metricPath,"/",p)), nlcd)
}
}
nlcd_sub <- crop(nlcd, extent(raster(paste0(metricPath,"/",p)))
dat <- extract(raster(paste0(metricPath,"/",p)), nlcd)
}
nlcd_sub <- crop(nlcd, extent(raster(paste0(metricPath,"/",p))))
extent(nlcd)
extent(raster(paste0(metricPath,"/",p))
)
proj4string(nlcd)
proj4string(raster(paste0(metricPath,"/",p)))
plotrast <- raster(paste0(metricPath,"/",p))
plotrast <- spTransform(plotrast, nlcd)
plotrast <- spTransform(plotrast, proj4string(nlcd))
?spTransform
plotrast <- projectRaster(plotrast, crs = proj4string(nlcd))
nlcd_sub <- crop(nlcd, extent(plotrast))
nlcd_sub <- rasterToPoints(nlcd_sub)
dat <- extract(raster(paste0(metricPath,"/",p)), nlcd_sub)
nlcd_sub
dat <- extract(raster(paste0(metricPath,"/",p)), points(nlcd_sub))
dat <- extract(raster(paste0(metricPath,"/",p)), coordinates(nlcd_sub))
coordinates(nlcd_sub)
dat <- extract(raster(paste0(metricPath,"/",p)), coords(nlcd_sub))
dat <- extract(raster(paste0(metricPath,"/",p)), as.data.frame(coordinates(nlcd_sub)))
dat <- extract(plotrast, as.data.frame(coordinates(nlcd_sub)))
?extract
dat <- extract(plotrast, nlcd_sub)
class(x)
class(plotrast)
dat <- extract(plotrast[1], nlcd_sub)
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
nlcd_sub <- crop(nlcd, extent(plotrast))
nlcd_sub <- SpatialPoints(rasterToPoints(nlcd_sub))
dat <- extract(plotrast, nlcd_sub)
dat <- extract(x = plotrast, y = nlcd_sub)
nlcd_sub <- SpatialPoints(rasterToPoints(nlcd_sub$coords))
nlcd_sub <- crop(nlcd, extent(plotrast))
nlcd_sub <- SpatialPoints(rasterToPoints(nlcd_sub))
nlcd_sub <- crop(nlcd, extent(plotrast))
nlcd_sub <- rasterToPoints(nlcd_sub)
nlcd_sub <- rasterToPoints(nlcd_sub)
dat <- extract(x = plotrast, y = nlcd_sub)
nlcd_sub <- as.data.frame(nlcd_sub)
nlcd_sub <- as.data.frame(rasterToPoints(nlcd_sub))
dat <- extract(x = plotrast, y = nlcd_sub)
dat <- extract(x = plotrast, y = nlcd_sub[,c("x","y")])
nlcd_sub[,m] <- dat
nlcd_sub
nlcd_sub[!is.na(nlcd_sub)]
\
nlcd_sub[!is.na(nlcd_sub$all_d0)]
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_nlcd.R')
sum(!is.na(nlcd_sub$tree_vdr))
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_svm.R')
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_svm.R')
??createDataPartition
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_svm.R')
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_svm.R')
model_after_tune <- svm(xTrain, yTrain, cost=10, gamma=2)
yOut <- predict(model_after_tune, xTrain)
tbl <- table(yOut,as.numeric(unlist(yTrain)))
print(sum(diag(tbl))/sum(tbl))
yOut1 <- predict(model_after_tune, xTest)
tbl1 <- table(yOut1,as.numeric(unlist(yTest)))
print(sum(diag(tbl1))/sum(tbl1))
tbl
model_after_tune <- svm(xTrain, yTrain, cost=10, gamma=2, type="C-classification")
yOut <- predict(model_after_tune, xTrain)
tbl <- table(yOut,as.numeric(unlist(yTrain)))
print(sum(diag(tbl))/sum(tbl))
yOut1 <- predict(model_after_tune, xTest)
tbl1 <- table(yOut1,as.numeric(unlist(yTest)))
print(sum(diag(tbl1))/sum(tbl1))
source('/media/megan/Seagate1/Spring17/CMSE820/project/get_svm.R')
library(shiny)
runExample("01_hello")
runApp('/media/megan/Seagate1/FOR875/Shiny/shinyApp/Shiny01')
getwd()_
getwd()
setwd("/media/megan/Seagate/FOR875/Shiny/shinyApp/Shiny01/")
read.csv("Michigan_State_Park_Campgrounds.csv")
campsites <- read.csv("Michigan_State_Park_Campgrounds.csv")
library(knitr)
?Sweave2knitr
rmarkdown::shiny_prerendered_clean('/media/megan/Seagate/FOR875/Shiny/testShiny-knitr.Rnw')
rmarkdown::shiny_prerendered_clean('/media/megan/Seagate/FOR875/Shiny/testShiny-knitr.Rnw')
getwd()
cd ..
setwd('..')
getwd()
setwd('..')
getwd()
ls
ls()
list.files()
rmarkdown::shiny_prerendered_clean('testShiny.Rnw')
rmarkdown::shiny_prerendered_clean('testShiny.Rnw')
runExample("01_hello")
library(shiny)
library(shiny)
runExample("01_hello")
\usepackage{graphicx}
\usepackage{listings}
getwd()
setwd("shinyApp/CampsitesMI/")
read.csv("Michigan_State_Park_Campgrounds.csv")
sites <- read.csv("Michigan_State_Park_Campgrounds.csv")
ncol(sites)
max(sites$TOTAL_SITE)
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
unique(sites$Camp_type)
list(unique(sites$Camp_type))
list(unique(sites$Camp_type))
list(factors(sites$Camp_type))
levels(sites$Camp_type)
runApp()
runApp()
levels(sites$Camp_type)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(maps)
runApp()
runApp()
?map
runApp()
runApp()
?plot
library(sp)
runApp()
runApp()
library(ggplot2)
mi <- get_map("michigan")
library(ggmap)
mi <- map_data('michigan')
mi <- map_data('state', region = 'michigan')
plot(mi)
mi
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
